

\chapter{Úvod}
V poslednej dobe sa pre tvorbu rozsiahlych aplikácií, ktoré kladú dôraz na rýchlos», bezpeènos» a transakèné spracovanie pou¾íva trojvrstvový model. Komplexným rie¹ením je platforma Java EE, ktorá zahàòa mno¾stvo technológií pre prístup k relaèným databázam, pre podporu webových slu¾ieb, pre vývoj zdieµanej podnikovej logiky, \ldots.

Cieµom tejto práce bolo vytvorenie systému monitorovania stavu plánovacích úloh, ktorý bol zadaný spoloènos»ou Red Hat. Tento systém je schopný rie¹i» rozlièné plánovacie problémy. Rie¹enie je realizovaný frameworkom OptaPlanner, ktorý na základe pravidiel a definièných entít pre danú úlohu sa pokúsi nájs» najlep¹ie rie¹enie, ktorý poskytne ako výsledok. Proces vývoja systému a teoretické poznatky sú obsahom tejto správy. Správa je rozdelená do kapitol.

 \newline \indent Druhá kapitola \ref{JavaEE} sa venuje Java EE platforme spolu s pou¾itými technológiami. Kapitola predstavuje trojvrstvový model, rovnako aj pou¾ité technológie. Na záver kapitoly \ref{jbossc} je uvedený Java EE kontajner JBoss. \newline \indent V~tretej kapitole \ref{optaplannerC} je vysvetlený framework OptaPlanner. V kapitole sa pojednáva postupne od základov problematiky plánovania a¾ po bli¾¹iu vysvetlenie pojmu plánovací problém. V~tejto kapitole sa e¹te oboznámime s~princípom plánovania prostredníctvom tohto frameworku, rovnako aj konfiguráciu toho frameworku. \newline \indent V~¹tvrtej kapitole \ref{impl} je prezentovaná ¹pecifikácia po¾iadavkov, rovnako ako aj analýza technológií. V~piatej kapitole \ref{implc} je uvedená implementácia. Na záver kapitoly sú uvedené metódy a postup testovania. V~závereènej kapitole \ref{zaver} je zhrnutý obsah celej práce, zhodnotené jej prínos a mo¾nos» ïal¹ieho roz¹írenia.\newline \indent  V~sekcii príloh nájdeme postup na in¹taláciu a spustenie aplikácie rovnako ako aj kompletný prehµad navrhnutého rozhrania.


\chapter{Java Enterprise edition 6}\label{JavaEE}
Táto kapitola poskytuje prehµad o~platforme Java EE 6, rovnako ako o technológiách, ktoré sú súèas»ou tejto platformy a sú pou¾ívané pri implementácií systému monitorovania. Predstavuje trojvrstvový model pre tvorbu aplikácií, rovnako aj ïal¹ie pou¾ité technológie z platformy Java EE. \newline \indent V~závere kapitoly je rozobratý aplikaèný server JBoss, ktorý je pou¾itý pre nasadenie výslednej aplikácie výsledného systému. Dôvodom pou¾itia tohto aplikaèného servera je mo¾nos» pou¾itia pokroèilých testovacích nástrojov a nástroja na správu projektu, ktoré sú urèené pre jazyka Java.


\section{©pecifikácia platformy}
Java EE je platforma, ktorá zastre¹uje viaceré technológie a definuje prostriedky urèené pre zjednodu¹enie vývoja komplexných podnikových aplikácií\cite{fitweb}. Tieto aplikácie su rozsiahle, komplexné a kladú dôraz na bezpeènos», spolahlivos». Z dôvodu prehµadnej¹ieho návrhu, implementácie a jednoduch¹ej údr¾by sú tieto aplikácie rozdelené do vrstiev. Súèas»ou tejto platformy je kolekcia ¹pecifikácií ¹pecifikácia od Sun/Oracle pre vývoj webových aplikácií, podporu webových slu¾ieb, \ldots.

Java oznaèuje okrem programovacieho jazyka, tak isto aj platformu. Java platforma sa skladá z~virtuálneho stroja a príslu¹ného Application Programming Interface(API). Virtuálny stroj je behové prostredie na¹ej aplikácie zlo¾eného z~tried, ktoré bolo prelo¾ené do byte kódu(medzi kód vytvorený java prekladaèom, ktorý sa následne spú¹»a na virtuálnom stroji). Java API je sada vytvorených tried, ktoré mô¾me vyu¾i» pri implementácií aplikácie a sprístupòuje funkènos» virtuálneho stroja\cite{javaeespec}.\newline \indent Základom pou¾ívania Java EE aplikácií je prítomnos» ¹tandardného API vyu¾ívané enterprise aplikáciami. Java EE teda poskytuje API v~rôznych oblastiach, èi je to oblas» webových slu¾ieb(napríklad Java API for XML Web Services), správu transakcií(napríklad Java Transaction API) alebo rôzne iné oblasti. Aplikácia, ktorá pokrýva v¹etky API, ktoré spåòa ¹pecifikáciu Sun/Oracle pre Java EE sa nazýva aplikaèný server. Aplikaèný server rovnako poskytuje aj klasické slu¾by na jeho spravovanie. Referenènou implementáciou Sun/Oracle je server GlassFish. Základom Java EE aplikácie sú komponenty, ktoré predstavuju základné jednotky , ktoré sa nasadzujú na server. Komponent existuje niekoµko druhou, ale len niektoré sa nasadzujú na aplikaèný server. Ka¾dý aplikaèný server obsahuje kontajnery, ktoré sa starajú o~poskynutie funkcionality konkrétnej komponente. 

\section{Trojvrstvový model}\label{kapapp}
Java EE definuje aplikácie, ktoré sú viacvrstvové. Pojmom viacvrstvos» je myslené rozdelenie aplikácie podµa funkènosti na men¹ie celky(ktoré nazývame vrstvy), ktoré majú nastaros» urèitú úlohu. Ka¾dá vrstva je predstavovaná inými technológiami. Vo výsledku jednotlivé vrstvy medzi sebou komunikujú a toto rozdelenie uµahèuje a zprehµadòuje presnos» vývojových cyklov aplikácie. Ka¾dá vrstva je reprezentovaná komponentou, ktorá predstavuje funkènú èas» programu zostavenú z~tried a súborov, ktorá je vlo¾ená do Java EE aplikácie a interaguje tak s~inými komponentami\cite{Pravidla}. Jednotlivé komponenty sa následne in¹talujú na rôzne vrstvy v~závislosti od ich príslu¹nosti. Jednotlivé stupòe sa skladajú z~rôznych komponent, prièom stupne sú rozdelené nasledovne:
\begin{itemize}
\item Klientský stupeò sa skladá z~klientských komponenent, ktoré be¾ia na klientskom poèítaèi
\item Stredná vrstva sa skladá z~webových a podnikových komponent, ktoré be¾ia na Java EE serveri, ktorý predstavuje prostredie pre nasadenie, spravovanie a beh podnikových a webových komponent Java EE aplikácie
\item Najni¾¹ia vrstva predstavuje externé systémy vyu¾ívané Java EE aplikáciou. Typicky sa jedná o~databázový server a externé systémy oznaèujeme názvom \uv{Enterprise Information System(EIS)}
\end{itemize}

Typicky be¾í medzi klientskom a databázou èastou viac-vláknový Java EE server. Na základe tohto rozdelenia mô¾me uvies», ¾e platforma Java EE sa pou¾íva vývoj vo webovej a podnikovej vrstve, ktoré be¾ia na Java EE serveri.  Na obrázku è. \ref{model} mô¾me vidie» viacvrstvové rozdelenie.
\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.5]{model.jpg} 
\caption{Model Java EE prevzaté z~[http://docs.oracle.com/javaee/6/tutorial/doc/].}
\label{model}

\end{center}

\end{figure}
Klient pristupuje k~Java EE aplikácií na Java EE serveri z~klientskej stanice, prostredníctvom webového prehliadaèa(\uv{tenký klient} preto¾e sa nedotazuje priamo na databázový server), alebo klientskej aplikácie, ktorá sa nazýva \uv{hrubý klient}. Tenký klient teda pozostáva z: webové prehliadaèa, ktorý zobrazuje stránky pozostávajúce z~rôzneho znaèkovacieho jazyka, ktoré sú generované webovými komponentami. Tenký klient sa dotazuje prostredníctvom Hypertext Transfer protokolu(HTTP), èo je internetový protokol pre výmenu hypertextových dokumentov, na webové komponenty na Java EE serveri. Hrubý klient, ktorý mô¾e by» reprezentovaný rozliènými Java SE technológiami pre tvorbu u¾ívateµských rozhraní, sa mô¾e priamo dotazova» podnikových komponent a preskoèi» tak komunikáciu s~webovými komponentami. \newline \indent Stredná vrstva sa delí na webovú vrstvu, ktorá je prezentovaná technológiami JavaServer Faces a JavaServer Pages. Druhá èas» strednej vrstvy takzvaná podniková vrstva býva reprezentovaná technológiu Enterprise JavaBeans, ktoré vytvárajú logiku aplikácie. Webová vrstva je reprezentovaná webovými komponentami, ktoré spracovávajú po¾iadavky od u¾ívateµa a generujú odpoveï, ktorú posielajú naspä» u¾ívateµovi. Mô¾u pritom kontaktova» aj podnikové komponenty pre zistenie dodatoèných informácií(typicky informácie z~databáze). Podniková vrstva je reprezentovaá podnikovými komponentami, ktoré tvoria základ aplikácie. Tieto komponenty mô¾u prijíma» po¾iadavky od klienta alebo webovej vrstvy a následne generujú odpovede, prièom mô¾u komunikova» s~najni¾¹ou vrstvou(napríklad komunikova» s~databázovým serverom). Táto vrstva be¾í na Java EE serveri. \newline \indent Najni¾¹ia vrstva predstavuje rozlièné externé systémy, ktoré aplikácia mô¾e vyu¾íva», èi u¾ sa jedná o~databázový systém, alebo iné. Vrstva býva oznaèovaná skratkou EIS.



\section{JavaServer Pages}\label{jspkap}
JavaServer Pages(JSP) technológia je jazyk, ktorý umo¾òuje priamo vkladanie Java kódu do HyperText Markup Language(HTLM) kódu. HTML je znaèkovvací jazyk pre vytváranie webových stránok, ktorý obsahuje HTML znaèky. Pre vlo¾enia java kódu v~HTML stránke sa pou¾ívajú nasledujúce znaèky: \emph{<\%} \emph{\%>} medzi, ktoré sa vlo¾í príslu¹ný java kód. Takéto èasti v~HTML stránke sa nazývaju \uv{skriptlety}. Tieto skriplety sú dynamické, to znamená, ¾e sú vykonávané za behu aplikácie. Behom aplikácie je myslené nasadenie jsp stránky(stránka obsahújca skriplety) na Java EE server, ktorý zabezpeèuje jeho vykonávanie prostredníctvom volania jsp kontajneru.

\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.5]{architecture.jpg} 
\caption{JSP architektúra  prevzáte z~[http://interval.cz/clanky/javaserver-pages-pro-vsechny/]. }
\label{jsp}

\end{center}

\end{figure}
Na nasledujjúcom obrázku è.\ref{jsp} je zobrazený princíp technológie JSP. Základnou èas»ou je existenia JSP stránky a jej nasadenie na Java EE serveri. V~1.kroku existuje u¾ívateå, ktorý je reprezentovaný webovým prehliadaèom, ktorý za¾iada o~JSP stránku. Java EE server prijme po¾iadavku od klienta a zistí, ¾e sa jedná o~po¾iadavku o~JSP stránku . Ten zavolá JSP servlet kontajner na spracovanie ¾iadosti, ktorý obsahuje JavaServer Pages prekladaè, ktorý obsluhuje spracovanie, kontrolu a generovanie. Následne JSP servlet stroj spracováva JSP stránku a vyhodnocuje skriplety a nahradzuje ich výskytom HTML kódom, ktorý produkuje na výstup. Výstupom zo JSP servlet stroja, ktorý vznikol ako po¾iadavka o~JSP stránku je HTML stránka, ktorá je predaná u¾ívateµovi, ktorý si ju zobrazí. Výhodou tejto technológie je, ¾e pri ¾iados» o~JSP stránku je, ¾e pri zmene sa nemení celý obsah stránky ale len jej èas», ktorá bola zmenená. Tak¾e takéto JSP stránky sú dynamické a umo¾òujú zmenu obsahu za behu.



\subsection{JavaServer Faces}\label{jsfkap}
JavaServer Faces(JSF) je framework pre tvorbu u¾ívateµských rozhraní webových aplikácií, ktoré be¾ia na Java EE serveri\cite{jsfbook}. JSF framework vytvára aplikácie na základe  Model-View-Controller(MVC). MVC predstavuje sotwarovú architektúru, ktorá rozdeµuje aplikáciu na dátový model, u¾ívateµské rozhranie a riadiacu logiku. Princíp je nasledujúci:
\begin{itemize}
\item Model - ¹pecifická reprezentácia dát, s~ktorými pracuje aplikácia
\item View - prevádza dáta aplikácie vhodné do podoby prezentácie u¾ívateµa
\item Controller - reaguje na udalosti, typicky od klienta a zabezpeèuje zmeny v~model alebo view

\end{itemize}
Pri vyu¾ítí tohto frameworku programátor vkladá predpripravené komponenty(tlaèidlá, vyskakovacie okná, rolovacie zoznamy, \ldots) a mapuje ich na príslu¹né triedy. JSF sa skladá z~2 èastí:
\begin{itemize}
\item JSF API - obsahuje komponenty u¾ívateµského rozhrania, umo¾òuje ich správu, validáciu vstupov, zpracovanie udalostí, navigáciu a iné
\item Kni¾nica tagov(tag library), ktorá mô¾e by» alternatívne nahradená JSP kni¾nicou tagov - prostredníctvom týchto ¹peciálnych tagov vkladáme komponenty u¾ívateµského rozhrania na stránku a upravuje ich chovanie pomocou atribútov alebo mapovaním na triedy. Ka¾dá komponenta je definovaná urèitou triedou, ktorá urèuje jej funkcionalitu. Tagy jednotlivých kni¾níc sú rozli¹ované na základe menných priestorov.
\end{itemize}

JSF umo¾òuje ma» výstup v~podobe HTML jazyka, alebo iného jazyka v~závislosti od definièných tried komponent. Základnou implementáciu prevádza JSF komponenty do HTML kódu.
\subsection{JSF aplikácia}
JSF aplikácia je klasická webová aplikácia, ktorá obsahuje aj svoje ¹pecifiká. Základná ¹truktúra JSF aplikácie je nasledujúca, prièom nie v¹etky èasti sú povinné:
\begin{itemize}
\item Súbory znaèkovanie jazyka HTML alebo Extensible Hypertext Markup \\Language(XHTML)\cite{xhtmlbook}, ktoré obsahuju komponenty u¾ívateµského rozhrania z~kni¾nice tagov, ktoré mô¾u by» namapované na tzv. \uv{managed bean-y}
\item Managed Beans - java triedy, ktoré sú spravované JSF frameworkom. Najdôle¾itej¹ie sú \uv{backing bean}, ktoré zabezpeèujú funkcionalitu na HTML/XHTML stránke, udr¾ujú stav komponent, zpracovájú udalosti, validáciu \ldots. Ich konfigurácia sa realizuje v~súbore \emph{faces-config.xml}
\item Konfiguraèný súbor \emph{faces-config.xml}, v~ktorom sa definujú backing beany spolu s~ich typom, navigácia, validátory(java triedy, ktorá spracovávajú kontrolujú zadané hodnoty), \ldots
\item Popisovaè nasadenia \emph{web.xml}, ktorý umo¾òuje nastavenie uvítacích stránok, filtre, servlety a \ldots
\end{itemize}
Neoddeliteµnou súèas»ou tohto frameworku je Expression Language(EL), je jazyk, ktorý umo¾òuje dynamicky pristupova» k~metódam javovských tried(backing bean). Rovnako doká¾e získa» a nastavi» hodnotu danej komponenty. Pri preklade sa vygenerejú závislosti na backing beans(java triedy) metódy. Backing bean doká¾e za behu spracováva» údaje zadané na webovú stránku, rovnako doká¾e obstara» validáciu vstupov,  následne metódy a vlastnosti, ktoré sú volané alebo sú im predávané údaje z~vygenerovavnej stránky(HTML alebo XHTML) do backing bean-y alebo opaène. 
V~poslednom rade treba uvies» ¾ivotný cyklus JSF aplikácie.
Celý ¹tandardný cyklus cyklus spracovania po¾iadavky a následne generovania odpovedi je popísaný na nasledujúcom obrázku.
\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.7]{jsflifecycle.jpg} 
\caption{JSF ¾ivotný cyklus [http://docs.oracle.com/javaee/1.4/tutorial/doc/]. }
\label{lifecycle}

\end{center}

\end{figure}
Na obrázku è.\ref{lifecycle} mô¾me vidie» ¾ivotný cyklus JSF aplikácie. Poèas fázy Restore View, keï je kliknuté na tlaèidlo alebo na link sa vytvorí náhµad stránky, spoja sa v¹etky spracovania udalostí, validátory a komponenty a ulo¾ia sa do in¹tancie FacesContext. V~ïal¹ej fáze Apply Request Values sú snové hodnoty získané pou¾ítím metódy decode. Hodnoty sú potom ulo¾ené lokálne do komponenty. Pokiaµ nastane chyba, tak je propagovaná a generovaná do FacesContext-u. Na konci tejto fáze sa vykoná znova dekódovanie. Vo fáze Process Validations spracuje v¹etky registrované validátory ku komponentám. Pokiaµ nastala chyba, tak je táto informácia ulo¾ená do FacesContext-u. Poèas ïal¹ej fázy Update Model Values nastaví do komponent lokálne nové hodnoty. Poèas predposlednej fáze Invoke Application sú spracované rozlièné ¾iadosti ako potvrdzonie formulára alebo link na iný stránku. V~poslednej fáze Render Response dôjde k~renderu stránku s~novými hodnotami v~kotajnery.

\section{Webová slu¾ba}\label{webkap}
Web Service je sotwarový systém navrhnutý na podporu inteoperability medzi rôznymi zariadeniami prostredníctvom poèítaèovej siete\cite{fitweb}. Komunikácia prebehia prostredníctvom HTTP protokolu vymenieòaním Extensible Markup language(XML) správ. XML je znaèkovací jazyk, ktorý definuje sadu pravidiel pre kódovanie dokumentu vo formáte porozumiteµnom èloveku prostredníctvom µubovolných znaèiek. Webové slu¾by poskystujú interoperabilitu medzi rôznymi platformami naprieè poèítaèou sie»ou. Tento aspekt je umo¾nený tým, ¾e aplikácie komunikujú prostredníctov HTTP protokolu. Komunikácia prostredníctvom webovej slu¾by sa delí na 2 uèastníkov. Prvý úèastník produkovateµ(producer), ktorý vytvára po¾iadavok a spotrebiteµ(consumer), ktorý prijíma po¾iadavok. Komunikácia prebieha medzi týmto dvoma uèastníkmi výmenov správ. Webová slu¾ba mô¾e by» technicky implementovaný rôznymi mo¾nos»ami a prostredníctvom Big Web Service alebo Restful WebService, prièom v~princípe ide o~java triedy, ktoré obsahujú ¹peciálne definície triedy a metód a pri nasadení na Java EE server mô¾u by» vzdialene(po sieti) zavolané ich metódy. 



\subsection{Big webová slu¾ba}\label{bigkap}
Big webová slu¾ba je druh webovej slu¾by, ktorý pre svoju implementáciu pou¾íva API JAX-WS\cite{fitweb} "Big" . Tento typ webovej slu¾by umo¾òuje vytvára» webové slu¾by orientované na správy alebo techniku vzdialeného volania procedúr(RPC). RPC je technológia, ktorá umo¾òuje volanie metód, ktoré sa nachádzajú na inom mieste, typicky inom mieste poèítaèovej siete. Tento typ webovej slu¾by vyu¾íva XML správy, spolu so Simple Object Acess Protocol(SOAP) a XML jazykom. SOAP definuje protokol pre výmenu správ zalo¾ených na jazyku XML prostredníctvom siete prostredníctvom HTTP protokolu. SOAP správy sa skladajú z~hlavièky a tela správy, ktoré obsahuje odpoveï webovej slu¾by alebo po¾iadavok na vyvolanie akcie webovej slu¾by.
\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.5]{webservice.jpg} 
\caption{\uv{Big} webová slu¾ba  prevzaté z \newline[http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html] }
\label{com}

\end{center}

\end{figure}
Nasledujucí obrázok è.\ref{com} ukazuje spôsob komunikácie medzi klientom, ktorý sa nachádza v~µavej èasti obrázku a webovou slu¾bou, ktorá sa nachádza vpravej èasti obrázku. Komunikácia prebieha prostredníctvom vymienania SOAP správ. Rovnako ako na klientovi tak aj web service obsahuje potrebné API, ktoré spracováva SOAP správy a predáva ich ïalej.

 Tento typ webovej slu¾by obsahuje definíciu vo formáte Web Service Description Language(WSDL). WSDL je definícia vo formáte XML, ktorá popisuje aké akcie webová slu¾ba poskytuje a zpôsob ich invokácie, rovnako  aj odpoveï. Správy volania a odpovedí web service sú vymieòané prostredníctvom SOAP správ prostredníctvom HTTP protokolu. JAX-WS API je pomerne komplikované, preto celá komplexnos» je vývojarovi zakrytá a je jediné, èo definuje vývojár sú metódy, ktoré je mo¾né vzdialene vola». Rovnako vývojár nespracováva SOAP správy, ale celá táto problematika je rie¹ená prostredníctvom prostredníctvom API. API umo¾òuje prístup k~ne-Javovským web service, èo priná¹a veµkú flexibilitu. Èo sa týka vývoja web service, tak sa jedná o~jednoduchú Java triedu, ktorá pou¾íva anotáciu javax.jws.WebService, konkrétne anotáciu @WebService, ktorá oznaèuje, ¾e sa jedná o~konvocý bod webovej slu¾by. Táto trieda následne definuje metódy, ktoré mô¾u by» vzdialené volané. Aby moha by» metóda metódou webovej slu¾by musí by» anotovaná prostredníctvom anotácie  javax.jws.WebMethod @WebMethod.

\subsection{RESTful webová slu¾ba}\ref{restkap}
RESTful webová slu¾ba je druh webovej slu¾by, ktorý pre svoju implementáciu pou¾íva API JAX-RS\cite{fitweb}. Tento druh webovej slu¾by nevy¾aduje striktné pou¾ívanie XML formátu a doruèovanie správ vo formáte SOAP. K~tomuto typu webovej slu¾by je pristupované na základe Uniform Resource Identifier(URI), ktorý predstavuje textový re»azec, ktorý slú¾i k~¹pecifikácií zdroja. K~tomuto je pou¾ívaná anotácia @Path(), ktorej hodnota zabezpeèí namapovanie a teda pomocou nej mô¾me pristupova» k~RESTful webovej slu¾be. Keï¾e táto slu¾ba nemá presne stanovený formát správ mô¾eme zvoli» z~formátov ako HTML,JSON, PDF, \ldots. Tento typ slu¾by je bezstavový, tak¾e ka¾dý prístup musí obsahova» v¹etky potrebné informáce, prièom je mo¾né ich oznaèi» ako cachovatelné(uchávajúcée sa vo vyrovnávanej pamäti) kvôli zvý¹eniu výkonosti. Nevýhodou je, ¾e pri vytváraní klienta a slu¾by musí by» pou¾ité rovnaké rozhranie z~dôvodu explicitnej nepodporovateµnosti jednoznaèného formátu správy pre komunikáciu.


\section{Princíp webových komponent}
Java EE webové komponenty sú softwarové komponenty, ktoré spracovávajú prichádzajúci HTTP po¾iadok a poskytujú naò odpoveï. V¹etky Java EE webové komponenty sú postavané na servletoch. Servlety sú javovské triedy , ktoré dynamicky spracovávajú po¾iadavky a tvoria odpovede. Súèas»ou servletov alebo webových stránok  sú technológie JavaServer Faces technológiu(JSF) \ref{jsfkap} and JavaServer pages(JSP) \ref{jspkap}. Technológie JavaServer Faces a JavaServer Pages podporujú spracovanie u¾ívateµských vstupov a ich predanie a spracovanie podnikovou vrstvou.



\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.5]{webtechnology.jpg} 
\caption{Webové komponenty prevzáte z\newline[http://docs.oracle.com/javaee/6/tutorial/doc/bnaay.html]. }
\label{web}

\end{center}

\end{figure}
Na nasledujúcom obrázku è.\ref{web} je ukázaný princíp fungovania webových komponent. V~hornej µavej èasti obrázku sa nachádza klientská vrstva, ktorá obsahuje buï len webový prehliadaè po prípade Applety. Applet je aplikácia, ktorú spú¹»a u¾ívateµ prostredníctvom webového prehliadaèa a je vykonávaná virtuálnym strojom. V~hornej pravej èasti mô¾e by» klient reprezentoný aplikaèným klientom, ktorý obsahuje obsahuje úplnú prezentaènú logiku aplikácie a teda v~tom prípade, odpadá potreba spracovania vstupov webovými komponentami. Takýto klient komunikuje u¾ len priamo s~Java EE serverom, konkrétne podnikovou vrstvou, ktorá implementuje zvy¹nú logiku aplikácie. V~prípade, ¾e máme k~dispozícií tenkého klienta, klient komunikuje prostredníctvom webové prehliadaèa s~HTML alebo XHTML stránkami, ktoré sú vytvorené technológiou JavaServer Faces\ref{jspkap} alebo JavaServer Pages\ref{jspkap}, ktoré spracovávajú po¾iadavky od klienta(vstupy) a následne komunikuje s~podnikovým stupòom, ktorý obsahuje logiku aplikácie, ktorá následne mô¾e komunikova» s~databázovým serverom. Odpoveï je v~prípade tenkého klienta následne \uv{predaná} stránkám vytvoreným prostredníctvom JavaServer Faces alebo JavaServer Pages technológiou a následne zobrazená u¾ívatelovi v~podobe výstupu webovej stránky. V~prípade hrubého klienta sa výstup zobrazí v~aplikaènom klientovi.


\section{Java Persistence API}\label{jpakap}
Java Persistence API(JPA) je framerok jazyku Java, ktorá poskytuje prístup a spravovanie dát v~databázy pomocou prístupu \emph{objektovo relaèné mapovanie}\cite{jpabook}. JPA obsahuje API, ktoré je nezávislé nad pou¾itou databázou technológiou, je mo¾né vytvára» dotazy nad MySQL, SQL databázou, \ldots. Tento prístup  umo¾òuje mapovanie dát medzi  z~databázových tabuliek na objekty javy(entity). Entita je základnou jednoutou JPA, s~ktorým pracujeme pri manipulácia s~dátami. Entitna je je odµahèený perzistentný doménový objekt, ktorý typicky reprezentuje tabuµku v~relaènej databázy a ka¾dá jej in¹tancia je riadkom v~tabuµke. Základný artefaktom v~programovaní je pre entity entitná trieda, ktorá obsahuje vlastnosti, ktoré priamo odpovedajú schéme vytvorenej databáze. Ka¾dá entitná trieda musí spåòa» urèité kritéria:
\begin{itemize}
\item Entitná trieda musí by» anotovaná javax.persistence.Entity anotáciou. Anotácia je re»azec obsahujúci znak \emph{@} nasledovaný µubovolným nenulovým poètom znakov, prièom mô¾e v~zátvorkách obsahova» ïal¹ie parametre. Anotácia pridáva ïal¹ie informácie o~oznaèenej(anotovanej polo¾ke). Anotova» mô¾e rovnako metódy, triedy ale aj vlastnosti tried.
\item Entitná trieda musí ma» parametrický kon¹truktor, aby bolo mo¾né vytvára» nové entity
\item Ka¾dá vlastnos» entitnej triedy musí spåòa» princíp Plain Old Java Objec(POJO), èo znamená, ¾e pre ka¾dú vlastnos» existuje metóda v~tvare getNázovVlastnosti, ktorá získa hodnotu vlastnosti a metóda v~tvare setNázovVlasnosti, ktorá nastaví danú hodnotu vlastnosti. Jednotlivé vlastnosti mô¾u by» dodatoène anotované napr. kvôli kontrole na hodnotu konkrétneho typu alebo vlastnosti(nenulovos», ¹peciálny formát, \ldots).
\item Ka¾dá entitná trieda musí ma» ma» unikátny identifikátor. Týmto identifikátorom chápeme primárny kµúè, èo je vlastnos», ktorá doká¾e v~databáze jednoznaène identifikova» záznam. Primárny kµúè býva anotovaný prostredníctvom anotácie \\javax.persistence.Id
\end{itemize}

Rovnako treba spomenú», ¾e ka¾dá entitná trieda mô¾u by» vo vz»ahu s~inými entitami. V~prípade, ¾e vlastnos» entity je súèas»ou vz»ahu s~inou entitou pou¾ijeme niektorú z~nasledujúcich anotácii podµa násobnosti vz»ahu: \emph{@One-to-one, @One-to-many, @Many-to-one, @Many-to-Many}. Rovnako uvedenie vlastnost/vlastnosti druhej entity, ktoré sa podieµajú na vz»ahu. To urobíme tak, ¾e na¹u vlastnos» e¹te anotujeme anotáciou javax.persistence.JoinColumn, v~ktorej parametroch uvedieme názvy vlastnosti druhej entity, ktoré sú súèa¹tou vz»ahu.
JPA ponúka aj iné, pokroèilé mo¾nosti mapovania, pre na¹e potreby nám budú staèi» nasledujúce informácie.
\newline \indent Aby sme mohli s~entitami pracova» potrebujeme si vytvori» in¹tanciu triedy \\javax.persistence.EntityManager. EntityManager je trieda, ktorá doká¾e vytvára» a odstraòova» entity, umo¾òuje ich vyhµadáva», rovnako aj vytvára» dotazy nad databázou. Dotazy, ktoré mô¾me vytvori» pomocou JPA sa podobajú klasickému jazyky Structured Query Language(SQL), ktorý dokáza¾e vytvára» dotazy nad databázou, av¹ak dotazovací jazyk jazyk JPA má niekoµko rozdielov. Tento jazyk sa nazýva Java Persistence Query Language(JPQL), èo je ako bolo spomenuté jazyk podobný SQL, prièom tento jazyk je re»azcovo zalo¾ený a je nezávislý na zvolenej databázovej techológií a má objektové vlastnosti, èo znamená, ¾e pri tvorbe dotazovou pou¾ívame názvy vlastností entitných tried a názvy entitný tried. Problém JPQL je typová nebezpeènos», èo vy¾aduje pretypovanie výsledkov dotazu z~entity manager-a. To mô¾e spôsobi» chyby, ktoré nemusia by» odchytené poèas kompilácie. JPA definuje e¹te Criteria API, ktoré je vyu¾ívané k~vytváraniu dotazovou nad entitami a vz»ahou, ktoré sú typovo bezpeèné. Výhodou tohto API, pre pou¾itie na dotazovanie, je rovnako mo¾nos» vytvára» dynamické dotazy, ktoré majú lep¹iu výkonnos» ako JPQL. Aby EntityManager bol schopný pracova» s~urèitými entitnými triedami je nutné vytvori» \emph{perzistentnú jednotku(persistence unit)}, èo je XML predpis, do ktorého uvedieme entitné triedy, odkaz na databázu po prípade ïal¹ie vlastnosti a ten vlo¾íme do súboru persistence.xml. Tento súbor predstavuje konfiguráciu, ktorá obsahuje okrem názvu entitných tried, tak aj rôzne iné vlastnosti, napr. je mo¾né automaticke vytvori» schému databáze z~entitných tried. V~tomto súbore sa rovnako nachádza dole¾itá polo¾ka a to je datasource, ktorý definuje odkaz na databázu, s~ktorou pracujeme. Na záver kapitoly zhrniem princíp práce s~JPA:
\begin{itemize}
\item Vytvorenie entitných tried spolu s~vlastnos»ami, správne naanotovanie tried, prièom návrh entitných tried odpovedá návrhu schémy databáze, ktorý po¾adujeme
\item Registrácia entitných tried v~súbore persistence.xml, v~ktorom nastaví aj odkaz na nami pou¾ívanú databázu
\item Vytvorenie in¹tancie triedy EntityManager, prièom mô¾me explicitne uvies» názov perzistentnej jednotky, s~ktorou pracujeme(perzistentných jednotiek mô¾e by» viac)
\item Pracujeme s~databázou spôsobom vytváraním, mazaním, editovaním hodnôt entitných tried, ktoré zapisujeme do databáze EntityManager-om, alebo vytvárame dotazy, ktoré realizuje EntityManager-om a výsledky podµa potreby spracovávame.
\end{itemize}


\section{Enterprise JavaBeans}\label{ejbkap}
EnterpriseJavaBeans(EJB) je technológia, ktorá umo¾òuje vytvára» komponenty, ktoré be¾ia v~strednej, konkrétne podnikovej vrstve aplikaèného modelu \ref{kapapp} Java EE\cite{ejbbook}. Takéto komponenty sú modulárne, keïze je mo¾né ich vytvori» a spravova» viac in¹tancií a mô¾me do nich umiestni» logiku na¹ej aplikácie. Takéto komponenty komunikujú s~klientom alebo webovými komponentami a na druhej strane mô¾u komunikova» s~EIS vrstvou a vykonávajú/predávajú získané informácie. Na EJB sa mô¾me pozera» aj ako na API platformy Java EE, prostredníctvom, ktorého mô¾me vytvára» triedy, ktoré sú ¹peciálne anotované a obsahujú podnikovú logiku a sú nasadené na Java EE server. Základnou podmienkou nasadenia na Java EE server je prítomnos» EJB kontajneru, do ktorého sa in¹talujú vytvorené triedy. Triedy vytvorené týmto API nazýva \emph{Enterprise Bean-y(EB)}.

EB sa delia na 2 kategórie:
\begin{itemize}
\item Message-driven bean - Pôsobí v~roli poslucháèa  urèitého typu správ, na ktorých príjem reaguje vykonaním urèitých akcií\cite{fitweb}
\item Session bean - Vykoná úlohy pre klienta. Mô¾e implementova» webové slu¾by\cite{fitweb}

\end{itemize}


\subsection{Session Bean}\label{sessionkap}
Session bean(SB) je typ EB, ktorá zapúzdruje podnikovú logiku, ktorá mô¾e by» vyvolaná lokálne alebo vzdialene. Prístup k~session bean je realizovaný prostredníctvom volania metód SB. SB následne vykoná kód metódy, po prípade vráti nejaký výsledok. \newline \indent SB mô¾e by» 3 typov:
\begin{itemize}
\item Stateful Session Bean - beany udr¾uje hodnoty premených, ka¾dá beana reprezentuje unikátny stav klienta/bean sedenia. Pokiaµ sa sedenie odstráni» stav zmizne.
\item Stateless Session Bean - Neudr¾uje stav komunikácie s~klientom. Poèas invokácie metódy takejto beany mô¾e in¹tancia obsahova» premenné, ktoré mô¾u obsahova» ¹pecifický stav vzhµadom na klienta, alebo len poèas invokácie metódy. Stav po ukoèení mizne, rovnako tento typ SB je mo¾né pou¾i» k~implementácií webovej slu¾by.
\item Singleton Session Bean - Teto typ beany je in¹tanciovaný len raz a pretrváva poèas celého ¾ivotného cyklu aplikácie. Vyu¾íva sa pri zdieµaní a súèasnom prístupe viacerých u¾ívateµov.
\end{itemize}

\subsection{Message-driven Bean}\label{messagekap}
Message-driven bean(MB) je typ EB, ktorá umo¾òuje Java EE aplikáciám asynchronné spracovanie správ. Tento beany prijíma Java Messaging Services(JMS) správy z~JMS fronty, ktoré následne analyzuje a vykonáva akcie\cite{jmsbook}. JMS je technológia, ktorá umo¾òuje komunikova» komponentám prostredníctvom správ. JMS fronty sú obyèajné fronty, do ktorých sa na jednom konci pri zavolaní MB vlo¾í ¹pecifická JMS správa a na druhej strane je MB postupne tieto správy odoberané a teda spracované len raz. JMS správa obsahuje rôzne informácie(¹pecifické hodnoty, \ldots). Správy zaradené v~JMS fronte mô¾u by» poslané rôznymi Java EE komponentami, alebo aj iným systémom, ktorý nepou¾íva Java technológiu. Zásadny rozdiel je oproti session bean v~zásade v~tom, ¾e sa k~takému  typu beanu nepristupuje prostredníctvom rozhrania a invokácie metód.Prístup k~takému typu EB sa deje prostredníctvom vytvorenia spojenia s~JMS frontou a vlo¾ení správou do fronty. Správy sú následne spracované na strane MB metódou \emph{onMessage}, ktorá vyberá z~JMS fronty správu po správe. Výhodou MB je ekvivaletnos» MB, to znamená ¾e správy mô¾e EJB kontainer µubovoµnej in¹tancii. MB má mô¾u by» vyvolané asychrónne, ktoré nevy»a¾ujú tak prostriedky servera, ¾ijú relatívne krátko a sú bezstavové. 

\section{Twitter Bootstrap}\label{bootkap}
Twitter Bootstrapje je dostupný súbor nástrojov pre vytváranie webových stránok a webových aplikácií\cite{boot}. Ponúka podporu najrôznej¹ích webových technológií HTML, CSS, JavaScript a mnoho prvkov, ktoré je mo¾né µahko integrova» do svojej stránky. Boostrap implementuje interaktívne prvky ako sú tlaèidlá, boxy, menu a ïal¹ie grafické elementy. Pre pou¾itie Boostrap-u je potrebné vlo¾i» do HTML kódu odkaz  na  kaskádové ¹týly a javascriptový súbor.

Výhodou týhto nástrojov je jednoduché pou¾ívanie a mo¾nos» pou¾itia aj na mobilných telefónoch. Podrobné vysvetlenie jednotlivých komponent nájdete na nasledujúcej adrese http://getbootstrap.com/, rovnako aj s~príkladmi pou¾itia. 

Boostrap obsahuje roz¹írenie Font Awesome, èo je CSS framework, ktorý obsahuje rôzne grafické ikony, ktoré je mo¾né intregova» do HTML kódu\cite{fontweb}.


\section{Rich Faces}\label{richkap}
Rich faces je open-source framework s~podporou Asynchrouns Javavascript and\\ XML(AJAX)\cite{ajaxbook}, ktorý predstavuje roz¹írenie JSF frameworku \ref{jsfkap}. Rich Faces obsahuje API, ktoré obsahuje grafické komponenty s~podporou Ajax-u. RichFaces podporuje mno¾stvo preddefinovaných vzhµadov. Rovnako umo¾òuje definova», ktoré JSF komponenty budú invokované na základe Ajax po¾iadavky, vrátane spôsobu invokácie a odpovede. Rovnako podporuje validáciu na strane klientského prehliadaèa.


\section{MySQL}\label{mysqlkap}
MySQL je databázová technológia, ktorá je vhodná pre malé a stredne veµke aplikácie, rovnako poskytuje dobrý výkon pri vykonávaní transakcíí. Umo¾òuje vytvára» procedúry, databázové triggere a jej in¹talácia je pomerne jednoduchá a nezaberá veµa diskové priestoru. Rovnako je MySQL multiplaformová, keï¾e je mo¾né ju nasadi» na systémy s~operaèným systémov Windows, Linux, Mac Os. Medzi nevýhody tejto technológie patrí neefektívna práca s~databázovými transakciami, neefektívne ukladanie veµkého mno¾stva dát. MySQL je open source a je vyvíjaná spoloènos»ou Sun Microsystems.

\section{Seam}\label{seamkap}
Seam je aplikaèný framework pre Java EE, ktorý definuje uniformný komponentný model pre podnikovú logiku aplikácie\cite{seambook}. Seam rie¹i integráciu EJB \ref{ejbkap} a JSF \ref{jsfkap} spolu. Medzi ïal¹ie výhodné vlastnosti tohto frameworku patrí integrácia Asynchronous JavaScript and XML(Ajax)\cite{ajaxbook}, rovnako aj vstavaná podpora javascriptu a efektívne spracovanie webových dotazov. \newline \indent Modul Seam security, ktorý obsahuje mno¾stvo mechanizmov na zabezpeèenie enterprise aplikácie. Základom ka¾dej bezpeènosti je autentifikácia, èo je process vytvorenia alebo potvrdenia identity u¾ívateµa. U¾ívateµ potvrdzuje svoju identitu prostredníctvom u¾ívateµského meno a hesla. Seam security poskytuje API prostredníctvom, ktorého je mo¾né sa autentizova» z~rozlièných zdrojov(databáze, \ldots). Ïal¹ou vlastnos»ou je Identity Management, ktoré je mno¾ina API na správu u¾ívateµov, skupín a u¾ívateµských rol. Identity Managent je poskytovaný Seam komponentou PicketLink IDM, ktorá spravuje ulo¾enie u¾ívateµov v~rozlièných bezpeènostných úlo¾iskách. \newline \indent Základom autentifikácie je Identity Bean, èo je java trieda, ktorá reprezentuje identitu u¾ívateµa a pri úspe¹nej autifikácií je identita je vlo¾ená do ¾ivotného cyklu aktuálneho sedenia. V~rámci autentifikácie sú definované metódy \emph{Login(prihlásenie)} a \emph{Logout(odhlásenie)}. Základom ka¾dej triedy, ktorá realizuje autentifikáciu je \\metóda(authenticate), v~ktorej prebieha autentifikácia u¾ívateµa.
Poèas autentifikácia sa overí pravos» u¾ívateµa a prostredníctvom metódy \emph{setStatus} sa nastaví úspech(SUCESS) alebo neúspech(FAILURE) pri overení zadaných údajov. Po autentifikácií dôjde k~vlo¾eniu identity u¾ívateµa do ¾ivotného cyklu aplikácie, ktorú je mo¾né získa» z~triedy triedy prostredníctvom anotácie @Inject triedy Identity.
\newline \indent Ïal¹í modul, ktorý nás zaujíma je Seam Faces, ktorý obsahuje API na zabezpeèenie prístupu k~HTML a XHTML stránkám. Túto fukènos» nazývame \emph{Faces View Configuration}, ktorá nám umo¾òuje spojenie so Seam Security modulom na obmedzenie/povolenie prístupu pre danú u¾ívateµskú rolu, preprepisovanie URL\ldots. Seam framework patrí pod divíziu JBoss, tak¾e je pomerne jednoduché ho intergrova» pod aplikaèný server JBoss-u. 


\section{Testovanie}\label{testkap}
V~poslednom rade uvedieme technológie, ktoré budeme pou¾íva» pre testovanie. Základom testovania je nástroj JUnit a nástroj Arqullian.
V~prvom rade sa budem venova» nástroju JUnit. JUnit je unit testovací nástroj pre programovací jazyk Java. JUnit sa pou¾íva pre typ testovania, ktorý sa nazýva \uv{test-driven development} a je jedným z~kolekcie unit testovacích nástrojov\cite{testdevbook} . JUnit býva súèa¹tou balíku org.junit\cite{junitbook}. Testovacie metódy sú anotované prostredníctvom @Test anotácie. JUnit rovnako umo¾òuje vykona» kód pred spustením testu, to docielime anotovaním metód @Before anotáciou alebo po sputení testu, to docielime anotáciou @After. V~testovacej metóde potom vykonáme nejaké kód a oèakávaný výstup porovnáme s~nami oèakávaným výsledok prostredníctvom metódy \emph{Assert}. JUnit testy sú písané pre otestovanie konkrétnej funkènosti kódu. Cieµom testovania prostredníctvom JUnit sú malé kúsky kódu, ako metódy alebo triedy. 
\newline \indent Nakoniec spomeniem nástroj Arquallian. Arquallian je testovací nástroj, ktorý vykonáva testy vo vnútri vzdialeného alebo vstavaného kontajneru alebo nasadí archív\\(obsahujúci java triedy spolu s~testovacími trieda) na Java EE kontajner. Arquallian integruje aj ïal¹ie testovacie nástroja, napr. JUnit 4, TestNG 5, \ldots. Treba zdôrazni», ¾e narozdiel od JUnit testov umo¾òuje testovanie v~java EE kontajnery(GlassFish, JBoss)\cite{arqbook}. Tento framework má zásadnú výhodu v~prenositeµnosti testov na rôzne podporované Java EE kotajnery. Nástroj pri spustení automaticky zabalí do archívu v¹etky potrebné prostriedky pre platformu. 
\newline \indent Pou¾itie Arqullian sa deje pou¾itím anotácie @RunWith Arquillian v~na¹ej javovskej testovej triede, ktoré zabezpeèí spustenie testov. Následne tento nástroj spustí kontajner a nasadí testovací archív, ktorý je daný anotáciou @Deployment. Archív obsahuje testy so ¹pecickými triedami a kni¾nicami. Testy sa následne vykonajú vo vnútri kotajneru. Èo znamená, ¾e mô¾u otestova» podnikové a webové komponenty za behu. Písanie testo s~nástrojou Arqullian zaèína tvorbou javovskej triedy, ktorá vyzerá ako ¹tandardná testovacia trieda vytvorená nástrojom JUnit, prièom obsahuje vy¹¹ie spomenuté ¹pecifické anotácie, ktoré umo¾òujú pri spustení testu vytvorenie archívu, nasadenie na Java EE kontajner a následne spustenie testov. V~poslednom rade je potrebné nakonfigurova» v~XML súbore arquillian.xml pre pou¾itie Java EE kontajnera. Arquallian.xml je XML súbor, ktorý obsahuju pou¾itie Java EE kontajneru a ïal¹ie ¹pecifické vlasnosti.


\section{WildFly Aplikaèný server}\label{jbossc}
Aplikaèný server(AS) je sotware, ktorý poskytuje vrstvu medzi operaèným systémom a Java EE aplikáciami. AS poskytuje funkcionalitu aplikáciám(prístup k~súborovému systému, \ldots), konkrétne enterprise aplikáciám. Vytvára vrstvu, ktorá zjednodu¹uje vývoj enterprise aplikáciam. Pomerne veµká skupina AS je vyvíjaná v~jazyku Java. Dôvodom pre tento jazyk je existencia ¹tandardu Java EE.

WildFly je open-source aplikaèný server verzie 8, ktorý vznikol premenovaním aplikaèného serveru JBoss, èo je vlastne skratka pre JavaBeans Open Source Application Server. Pre na¹e potreby budeme pou¾íva» WildFly v~verzii 7, preto bude pou¾ívaný názov JBoss. JBoss je aplikaèný server, ktorý je zalo¾ený na platforme Java a Java Enterprise Edition\cite{jbossbook}. Tento typ AS je open-source, preto je mo¾né jeho stiahnutie spolu so zdrojovými kódmi. Pou¾ívanie aplikaèného servera JBoss je veµmi jednoduché, jeho spustenie mô¾te vykona» ruène prostredníctvom konzole a nájdeným in¹talaèného adresára, ktorý obsahuje skript run.sh, ktorý spustí JBoss. Po spustení serveru je mo¾né k~nemu implicitne pristupova» na localhost na porte 8080. Základným stavebným kameòom JBoss AS je JBoss Microcontainer. JBoss Microcontaijner je refaktorizácia JBoss JMX Microkernel aby podporoval POJO nasadzovanie a samostatné pou¾itie mimo aplikaèného servera. Microcontainer registruje v¹etky pou¾ité slu¾by. Slu¾by, ktoré majú by prístupné sa registrujú v~podobe managed beans. Microcontainer spravuje a riadi beh týchto slu¾ieb. JBoss je licensovaný pod GNU Lesser General Public License(GNU PL).


\chapter{OptaPlanner}\label{optaplannerC}
OptaPlanner je open source framework a prokraèovanie frameworku JBoss Drools, ktorý vykonáva a optimalizuje rôzne plánovacie problémy, ktoré sú reprezentované XML súborom, s~rozlièným stupòom nároènosti. Optaplanner vyu¾íva pri rie¹ení problému, ktoré nemusí v¾dy nájs», optimalizaèné algoritmy a metaheuristické metódy s~vyu¾itím skóre. Skóre je hodnota, ktorá reprezentuje bodové hodnotenie optimálnosti dosiahnutého rie¹enia. Výsledným rie¹ením je to rie¹enie, ktoré má najvy¹¹ie skóre. Tento framework neurèuje striktne akými algoritmami a metódami sa má daný problém vyrie¹i», ale konfiguráciu ponecháva na strane u¾ívateµa. OptaPlanner je urèený pre jazyk Java, preto rie¹enie je vykonávané triedami v~tomto jazyky. Tieto triedu sú ¹pecifické pre daný problém, a musia by» schopné získa» potrebné informácie z~defièného súboru problému, ktorý reprezentuje zadanie problému, musia by» schopné vykonáva» postupné kroky vedúce k~rie¹eniu problému(napr. v~prípade problému N Dám presúva» dámy, tak aby sa v¾dy nachádzali vo validných pozíciách) a prostriedky, ktoré ohodnotnia krok a prekalkulujú celkové skóre. \newline \indent Samozrejme postup rie¹enia problému, kalkulácií skóre sa opakuje pre rôzne scenáre(napr. v~prípade N Dám pre rôzne alternatívne kombinácie pohybov) a vráti sa rie¹enie s~najlep¹ím skóre v~podobe súboru vo formáte XML(napr. v~prípade rie¹enia problému N Dám poskytne najlep¹ie mo¾né rie¹enie rozmiestnenia). OptaPlanner sa sna¾í v¾dy nájs» optimálne rie¹enie vzhµadom k~optimalizaèným algoritmom a metaheurestickým metódom a dostupnému èasu, ale niekedy nie je schopný poskytnú» na predchádzajúce podmienky optimálne rie¹enie(rie¹enie je ukonèené predèasne z~dôvodu vyèerpania dostupného èasu). Výhodou tohto frameworku je mo¾nos» aplikovania na NP-úplne problémy(ktoré sú rie¹ené v~dostupnom èasom). 

\section{Plánovací problém}\label{planprob}
Plánovacím problémom mô¾me obecne rozumie» akýkoµvek problém, ktorý vy¾aduje od nás zdroje a predikciu na priradenie zdrojov, nájdenie rie¹enia takého, aby výsledok bol v~koneènom dôsledku najlep¹í, cenovo aj èasovo najprijatelnej¹í.

V~be¾nom ¾ivote, rovnako ako ja v~podnikových sférách sa stretávame s~rôznymi plánovacími problémami. Mô¾e ís» o~problémy ako správne naplánova» cestu vozidiel(aút, lodí,\ldots), aby sme ju spravili za èo najkrat¹í èas, rovnako mô¾me po¾adova» aby cesta bola, èo finanène najefektívnej¹ia. Rovnako mô¾me plánova» rozvrh práce zamestatnancov vo firme, aby zbytoène nespomalovali chod ostatních zamestatnci, ktorí sú na ich práci závislí a nemuseli zbytoène èaka». Plánova» mô¾me spú¹»anie testovania aplikácií v~rámci vývojarskej firmy, aby niektoré úlohy boli otestované skôr ako iné, no musí by» èo najefektívnej¹ie výva¾ené a zbytoène nemrhali èasovým kvantom. Pokiaµ je problém dostatoène komplexný potom je veµmi vhodné pou¾i» Optaplanner. 

\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.8]{fig/useCaseOverview.jpg} 
\caption{Problém rozvrhnutia práce, prevzaté z~[http://www.optaplanner.org/]. }
\label{obrazokUseCase}

\end{center}

\end{figure}
Obrázok è. \ref{obrazokUseCase} zobrazuje typické pou¾itie OptaPlanner-u. Mô¾me vidie» v~nasledujúcom obrázku vystupujú 4 osoby(oznaèené obdå¾nikom modrej, ¾ltej, zelenej a oran¾ovej farby), ktoré vykonávajú nejakú èinnos». Ich èinnos» je ¹pecifická a silne závisí od práce predchádzajúcich. V~prípade nároènos» zadania takého problému je pomerne jednoduché naplánova» správne poradie èinností. Problém nastáva, ak by v~danom obrázku bolo niekoµko násobne viac ôsob. V~tomto prípade ¹tandardným prístupom by mohlo dôs» k~neefektívnemu rozdelnie práce a k~zbytoènému mrhaniu èasu. Preto je vhodné pou¾i» OptaPlanner, ktorý sa sna¾í ich èinnosti maximálne optimalizova» a jednotlivé èinnosti zvoli» v~následnosti tak, aby výsledná práca bola spravená za najkrat¹í mo¾ný èas vzhµadom na èinnos», ktorá sa optimalizuje.

Definícia problému v~prirodzenom jazyku by mohla v~oblasti informaèných technológií spôsobi» nejednoznaènos» v~jej interpretácií, preto je pou¾ívaný súbor vo formáte XML, v~ktorom definujeme poèiatoèné zadanie  plánovacieho problému. Formát XML súboru závisí od zadania problému. V~prípade, ¾e si zobere problém N Dám, tak zadanie súboru obsahuje presnú pozíciu dám na ¹achovnici. Keï si zobereme problém obchodného cestujúceho, tak definièný XML súbor obsahuje zoznam miest a jednotlivé vzdialenosti od seba. Obsah definièného súboru nemá jednoznaèný formát, ale v¾dy závisí od plánovacieho problému.


\section{Výsledky plánovacieho problému}
OptaPlanner podporuje niekoµko optimalizaèných algoritmov ako efektívne nájs» tieto veµké mno¾stvá rie¹ení. V~závislosti na prípade pou¾itia, niektoré optimalizaèné algoritmy dosahujú lep¹ie výsledky ako ostatné, ale to je nemo¾né poveda» dopredu. Pri plánovaní, je µahké prepnú» algoritmus optimalizácie, zmenou konfigurácie. Rovnako je mo¾né rozpracova» viacero rie¹ení problému prostredníctvom rôznych plánovacích algoritmov a metaheurestických metód, prièom je poskytnuté rie¹enie s~najlep¹ím skóre reprezentované XML súborom.



\section{Princíp}
Princíp rie¹enia problému je zalo¾ené na konfigurácií OptaPlanner tvorbou javovských tried na získanie potrebných dát z~definièného súboru, prostriedkov na kalkuláciu skóre a aplikáciu odkiaµ sa spú¹»a výpoèet. Rie¹enie problémom sa zaèína tvorou XML definièného problému ¹pecifického pre daný problém. Následne sa vytvoria triedy pre získanie dát z~XML súboru, triedy pre vykonávanie krokov plánovania(napr. v~prípade N dám presúvanie dám na validné pozicie) a prostriedky pre kalkuláciu skóre a nastavenie konfiguraèného súboru pre daný problém, ktorý bude bli¾¹ie popísaný v~nasledujúcej kapitole\ref{confopt}. Aby bolo jasné aké akcie sú povolené pre daný problém sú definované v~triedach pre rie¹enie obmedzenia:
\cite{optabook}
\begin{itemize}
\item Negatívne "hard" obmedzenie, ktoré nesmú by» poru¹ené\label{hardobm}
\item Negatívne "soft" obmedzenie, ktoré by nemali by» poru¹ené pokiaµ sa dá tomu vyhnú».
\item Pozitívne "soft" obmedzenia, ktoré by mali splnené pokiaµ je to mo¾né(mô¾u vies» k~lep¹iemu skóre)
\end{itemize}

 Prostriedky pre kalkulácie skôre mô¾u by» 3 typov:
\begin{itemize}\label{skorkal}
\item Jednoduchá kalkulácie skóre 1 metódou
\item Inkrementálna kalkulácie skóre prostredníctvom viacerých metód
\item Drools kalkulácia skore - táto konfigurácia definuje pravidlá pre kalkulovanie skóre\label{drollskal}
\end{itemize}
Drools kalkulácia skóre vyu¾íva vlastnú DRL syntax a je daná súborom, ktorý obsahuje pravidlá. Ka¾dé pravidlo je dané svojim názvom a podmienkou, v~ktorej sa overuje priebe¾né rie¹enie problému(napr. v~prípade N Dám priebe¾né rozlo¾enie dám), ktorá v~prípade splnenia upravuje skóre. Treba zdôrazni», ¾e v~konfiguraènom súbore u¾ívateµ nastavuje optimalizaèné algoritmy a metaheuristické metódy, ktorý sa sna¾ia v~spolupráci s~triedami na rie¹enie vybera» v¾dy najlep¹ie kroky pri rie¹ení.

 Spustenie rie¹enia je dané zavolaním hlavnej metódy odkiaµ sa spú¹»a rie¹enie problému. 
a spustí vykonávanie(plánovanie). Postup je nasledovný:
\begin{enumerate}
\item Overenie prostriedkov(definièného súboru, konfiguraèného súboru(obsahuje spôsob kalkulácie, definièného triedy, pou¾itie plánovacích algoritmy a metaheurestických metód) a prostriedkov na kalkuláciu skóre)
\item Naèítanie obsahu XML súboru 
\item Vykonanie kroku podµa pou¾itia plánovacích algoritmov
\item Optimalizácia kroku v~prípade pou¾itia metaheuristických metód
\item Ohodnotenie kroku(v závislosti od pou¾itia prostriedkov na kalkuláciu skóre \ref{skorkal})
\item Vykonanie alternatívneho kroku vzhµadom(napr. v~prípade N Dám presunutie \\dámy na µavú stranu ¹achovnice, miesto pravej)
\item Optimalizácia alternatívneho kroku v~prípade pou¾itia metaheuristických metód
\item Ohodnotenie kroku(v závislosti od pou¾itia prostriedkov na kalkuláciu skóre \ref{skorkal})
\item Opakovanie krokov 3., 4., 5., 6. a¾ dokým nie je dosiahnuté rie¹enie alebo plánovanie nie je predèasne ukonèené
\item Nájdenie rie¹enia alebo predèasné ukonèenie plánovanie vzhµadom na vysoké poskytnuté skóre(je mo¾né pou¾i» v~prípade, ¾e rie¹enie problému nebolo nájdené v~dostupnom èase)

\end{enumerate}


\section{Konfiguráciu OptaPlanneru}\label{confopt}
Konfigurácia OptaPlanner sa realizuje prostredníctvom XML súboru, ktorá má 3 povinné èasti a 4. voliteånú. Pre lep¹iu prehµadnos» je uvedená uká¾ka konfiguraèného súboru. 
 
\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.6]{xml.jpg} 
\caption{Problém vyvá¾enia cloudu}
\label{cloud}

\end{center}

\end{figure}

Nastavenie konfiguraèného súboru(solver) pre rie¹enie problému vyvá¾enie cloudu na obr.\ref{cloud} pozostáva z~3 èastí: 
\begin{itemize}
\item Nastavania definièných tried plánovacie problému, nastavania tried zabezpeèujúce plánovanie, nastavenie definícií skóre a nastavenie pou¾itia plánovacích algoritmov, po prípade nastavenia metaheurestických metód
\item Súbor je rozdelený na 3 èasti:
\begin{itemize}
\item Domain model configuration(zaèínajúc riadkom è.4), v~ktorom sú uvedené triedy definujúce problém a rie¹enie
\item Score Configuration(zaèínajúc riadkom è.7) definujúce spôsob kalkulácie skóre vrátane triedy
\item Optimalization algorithms configuration(zaèínajúc riadkom è.13) sú uvedené optimalizaèné algoritmy, vrátane spôsobu ukonèenia plánovia
\end{itemize}
\item Na riadku è.3 uvedená medzi znaèkami \emph{enviromentMode} hodnota \uv{FAST\_ASSERT}, ktorá umo¾òuje OptaPlanner detekova» chyby v~implementácií
\item Na riadku è.5 je uvedená medzi znaèkami \emph{solutionClass} hodnota \\\uv{org.optaplanner.examples.cloudbalancing.domain.CloudBalance}, ktorá odkazuje na definiènú triedu modelu problému vyvá¾enie cloudu
\item Na riadku è.6 je uvedená medzi znaèkami \emph{planningEntityClass} hodnota \\\uv{org.optaplanner.examples.cloudbalancing.domain.CloudProcess}, ktorá odkazuje na triedu, ktorá realizuje rie¹enie(plánovanie) problému
\item Na riadku è.9 je uvedená medzi znackami \emph{scoreDefinition} hodnota \uv{HARD\_SOFT}, ktorá hovorí, ¾e pri kalkulácií skóre pou¾ijeme len hard obmedzenia \ref{hardobm}
\item na riadku è.10 je uvedená medzi znaèkami \emph{simpleScoreCalculatorClass} hodnota \\\uv{org.optaplanner.examples.cloudbalancing.solver.score.\\CloudBalancingSimpleScoreCalculator}, ktorá odkazuje na triedu, ktorá kalkuluje skóre pri rie¹ení problému
\item Na riadku è.11 je uvedená medzi znaèkami \emph{scoreDrl} hodnot \\\uv{/org/optaplanner/examples/cloudbalancing/solver/cloudBalancingScoreRules.drl},\\ ktorá odkazuje na Drools definicíciu kalkulácie skóre \ref{drollskal}
\item na riadku è.15 je uvedená medzi znaèkami \emph{maximumSecondsSpend} hodnota \uv{120}, ktorá hovorí, ¾e rie¹enie musí by» nájdené do 120 sekúnd v~opaènom prípade dôjde k~ukonèeniu rie¹eniu a vrátenia najlep¹ieho doposiaµ dosiahnutého rie¹enia
\item Na riadku è.18 je uvedená medzi znaèkami \emph{constructionHeuresticType} hodnota \\\uv{FIRST\_FIT\_DECREASING}, ktorá oznaèuje pou¾itie plánovacieho algoritmu \\FIRST\_FIT\_DECREASING\cite{algibook}
\item Na riadku è. 20 je uvedená medzi znaèkami \emph{pickEarlyType} hodnota \\\uv{FIRST\_NON\_DETERIORATING\_SCORE}, ktorá oznaèuje pou¾itie pri kalkulovaní skóre najprv nezhor¹ujúce sa skóre(ohodnotenie, ktoré zvy¹uje hodnotu celkového skóre)
\item Na riadku è. 25 je uvedená medzi znaèkami \emph{entityTabuSize} hodnota \uv{entityTabuSize}, ktorá znaèí pou¾itie metaheuristickej metódy pri rie¹ení TABU SEARCH, s~veµkos»ou tabuµky 7\cite{algibook}
\item Na riadku è. 28 je uvedená medzi znaèkami \emph{acceptedCoundLimit} hodnota \uv{1000}, ktorá oznaèuje poèet náhodných krokov, ktoré sú vyhodnotené poèas 1 kroku rie¹enia problému
\end{itemize}


\newpage


\chapter{Aplikácia}\label{impl}
V~tejto kapitole postupne uvedieme po¾iadavky na aplikáciu, analýzu systému, návrh aplikácie, implementáciu, testovanie a nakoniec vyhodnotíme aplikáciu a navrhneme jej mo¾né roz¹írenia.

\section{©pecifikácia po¾iadavkov}
V~tejto kapitole postupne rozobereme po¾iadavky na systém monitorovania stavu úloh. Základnou úloh systému je monitorovanie úloh. Na jednej strane bude systém schopný zobrazova» stav plánovacích úloh, na druhej stranej bude môc» systém plánovacie úloh spú¹»at/pozastavi». Úlohy bude mo¾né triedi» podla urèitého kritéria, rovnako systém bude schopný aj úlohy vyhladáva». Jednotlivé úlohy je mo¾né aj maza», alebo zmeni» definíciu plánovacieho problému \ref{planprob} a úlohu znovu spusti». Novú úlohu bude mo¾né do systému vlo¾i» a následne sputi». Úlohy bude môc» systém publikova», èím sa myslí akcia, ktorá vytvorý pre úlohu ¹peciálne URL, na ktoré po kliknutí zobrazí stránku s~názvom úlohy a obsahom XML definièného súboru. Úlohu bude mo¾né aj odpublikova» a po pristúpení vráti prázdny obsah.
 Systém bude rozdelený podµa u¾ívateµ do 3 u¾ívateµských rolí(Administrátor, Plánovaè, Èitateµ). U¾ívatelia sú organizované do väè¹ích celkov(organizácie). Preto systém bude schopný spravova» u¾ívateµov,rovnako aj spravova» organizácie, ktoré bude schopný prehµadne zobrazova», triedi» a vyhµadáva» podµa urèitého kritéria. U¾ívateµov a organizácie je mo¾né vytvára». U¾ívateµ si bude môc» µubovoµne meni» heslo v~systéme. Vytvorený u¾ívatelia sa do systému prihlasuje, prièom po prihlásení je sprístupnená len èas» systému podµa u¾ívateµskej role prihláseného u¾ívateµa. Aplikácia bude obsahova» bezpeènostné mechanizmy, ktoré zabezpeèujú aplikáciu proti neautorizovanému prístup ú¾ívateµov. Vstupmi do systému budú:\begin{itemize}
\item Definièný súbor plánovacieho problému
\item U¾ívatelia systému, ktorý vykonávajú akcie v~systéme
\item Organizácie, do ktorých sú zaèleòovaný u¾ívatelia
\end{itemize}
Výstupom systému je zoznam plánovacích úloh v~prehµadnej tabuµke, rovnako aj zoznam u¾ívateµov a organizácií, ktoré sa rovnako zobrazujú v~prehµadnej tabuµke. V~predposlednom rade treba spomenú», ¾e výslednej rozhrania bude schopné by» prenositeµné na mobilné telefóny. 

V~poslednom rade treba uvies» rozsah úloh, ktoré bude môc» ka¾dá u¾ívateµská rola vykonáva»:
\begin{itemize}
\item Administrátor - má prístup ku v¹etkým úlohám v~systéme, úlohy mô¾e editova», vytvára», maza», publikova», odpublikova», mô¾e vytvára», maza» a editova» u¾ívateµov, rovnaké mo¾nosti má aj s~organizáciami
\item Plánovaè - má prístup k~úlohám v~rámci svojej organizácie, mô¾e vytvára», editova», maza» úlohy, publikova» a odpublikova»
\item Èitateµ - úlohy mô¾e len zobra» v~rámci svojej organizácie, publikova» , odpublikova»
\end{itemize}

Poslednom podmienkou bolo zvoli» vhodný prístup k~databáze, ktorý by bol univerzálny a teda nezávislý na pou¾itej databázovej technológií.

\section{Analýza}
Výslednú aplikáciu mô¾me rozdeli» na 2 èasti: 1. backend aplikácie, ktorý be¾í na Java EE serveri JBoss \ref{jbossc} 2.frontend aplikácie grafické u¾ívateµské rozhranie. Zameriame sa najprv na grafické u¾ívateµské rozhranie. Pri analýze grafického u¾ívateµského rozhrania je potrebné vyrie¹i» problém jeho návrhu a mo¾nosti jeho interakcie. Pou¾itie technológie JSP \ref{jspkap} by síce pripadalo do úvahy, problém je ¾e táto technológia neposkytuje ¾iadne grafické komponenty a jeho interakcia s~inými komponentami je pomerne komplikovaná. Z~tohto dôvodu bola pou¾itá technológia JSF \ref{jsfkap}, ktorá spåòa túto podmienku. Jej výhodou je jednoduchá integrácia s~aplikaèným serverom JBoss. Problémom, ktoré u¾ívateµské rozhranie potrebuje vyrie¹i» je pravidlné obnovovanie obsahu tabuliek plánovacích úloh, organizácií a u¾ívateµov, ktoré prostredníctvom technológie JSF je pomerne málo konfigurovateµné. Lep¹ie rie¹enie poskytuje pou¾itie frameworku Rich Faces \ref{richkap}, ktorý priamo integruje Ajax do v¹etkých jeho kompotent\cite{ajaxbook}. Posledným problémom, ktorý treba pri analýze grafického u¾ívateµského rozhrania vyrie¹i» je prenositeµnos» na mobilné zaradenia. V~tom nám pomô¾e framework Twitter Boostrap \ref{bootkap}. Prenositeµnos» je mo¾ná na mobilné rozhrania disponujúce µubovoµne veµkou zobrazovacou jednotkou. Treba ale zdôrazni», na ktorých webových prehliadaèoch je mo¾né aplikáciu bez problémov prehliada»:
\begin{itemize}
\item Na systéme Android: Chrome, Firefox
\item Na systéme iOS: Chrome, Safari
\item Na systéme Mac OS X: Chrome, Firefox, Opera, Safari
\item Na systéme Windows: Chrome, Firefox, Internet Explorer(verzia 8 - 11), Opera, Safari
\item Na systéme Linux: Chromium, Firefox
\end{itemize}
Tento framework sa v¾dy sna¾í podporova» najnov¹ie verzie v¹etkých vy¹¹ie uvedených prehliadaèov. Podpora ostatných prehliadaèov nie je odporúèaná z~dôvodu neoèakávaného chovania. Ako roz¹írenie bol pou¾itý CSS framework Font Awesome, ktorý obohacuje rozhranie o~grafické ikony\cite{fontweb}.

V~druhej èasti sa zameriame na problémy backend-u aplikácie(PlannerService). Celá aplikácie potrebuje udr¾ova» a spravova» dáta. Dátami sú mienené informácie o~úlohách, u¾ívateµoch a organizáciach. Z~toho dôvodu bolo treba vyrie¹i» otázku voµby vhodnej databázovej technológie. Existuje niekoµko mo¾ností, ktoré sa dajú µahko integrova» s~Jboss-om \ref{jbossc}. Keï¾e nároky na vy»a¾enos» prístupu k~dátam, rovnako aj mno¾stvo ulo¾ených dát sú malého merítka bolo vhodné zvoli» k~tomu adekvátnu databázou technológiu a tou technógiu je MySQL \ref{mysqlkap}. Následne treba spomenú» problém komunikácie s~u¾ívateµským rozhraní. Grafické u¾ívateµské rozhranie potrebuje komunikova» s~databázou odkiaµ získava aktuálne informácie o~úlohách, u¾ívateµoch a organizáciách. Rovnako sa do databáze zapisujú priebe¾né informácie o~plánovaní. Vzhµadom na podmienku nezávislosti pou¾itia databázovej technológie bola pou¾itá technológia JPA \ref{jpakap}. Pre plánovanie úloh je pou¾itý framework OptaPlanner. U¾ívateµské rozhranie je schopné spú¹»a» plánovanie , ktoré je optimalizované pre rie¹enie problému N Dám. K~tomuto rozhraniu je pristupované prostredníctvom webovej slu¾by \ref{webkap} prostredníctvom HTTP protokolu. Z~dôvodu pou¾itia ¹tandardných komunikaèných protokolov a ni¾¹ím nákladom na prevádzkovenie bola zvolená \uv{Big} webová slu¾ba \ref{bigkap}. U¾ívateµské rozhranie predstavuje klienta, ktorý volá metódy na spustenie a pozastavenie výpoètu. PlannerService obsahuje koncový bod, ktorý zachytáva správy od klienta a zabezpeèuje spú¹tanie/pozastavenie výpoètu(plánovania). Výsledné u¾ívateµské rozhranie bolo potrebné zabezpeèi» voèi neautorizovanému prístupu. Existuje priamo zabezpeèi» aplikáciu pomocou ¹tandardného API Java EE, no bol zvolený framework Seam \ref{seamkap}, ktorý mo¾no jednoducho integrova» pod JBoss.

PlannerService podobe session bean-y \ref{sessionkap}, ktorá reprezentuje webovú slu¾bu a obsahuje funkènos» pre spustenie a zastavenie výpoètu. Pri spustení výpoètu sú informácie predávanie message-driven bean \ref{messagekap}, ktorá zabezpeèuje spú¹tanie plánovania prostredníctvom OptaPlanner-u \ref{optaplannerC}.

Pre publikovanie má by» vytvorená RESTful webová slu¾ba \ref{restkap}, ktorá bude namapovaná na URI \uv{task/parameter} a parameter predstavuje ID úlohy, ktorá sa má zobrazi». Chovania má by» v~prípade verejnej úlohy zobrazenie úlohy a to informácií o~jej mene a definiènom súbore a v~prípade privátnej úlohy vrátenie prázdnej HTML stránky.

Rovnako boli pou¾ité ¹tandardné prostriedky na otestovanie funkènosti kúsky kódu pomocou JUnit testov a nástroju Arquillian \ref{testkap}.

Kvôli závislosti èasti systému PlannerService na entitných triedach, bola aplikácia u¾ívateµského rozhrania rozdelená na multimodulový projekt.


\section{Návrh aplikácie}
Výsledná aplikácia je rozdelená na 2 èasti. Na èas» reprezentujúci grafického u¾ívateµského rozhranie s~podporou prihlasovanie a u¾ívateµských rol, zabezpeèenia proti neautorizovanému prístupu. Rovnako je schopné zobrazova» úlohy, u¾ívateµov a organizácie podµa u¾ívateµskej role. Rozhranie pravidelne aktualizuje informácia o~úlohach, u¾ívateµoch a organizáciach z~databáze. Pre spustenie výpoètu úlohy komunikuje pomocou webovej slu¾by s~\uv{PlannerService}(optimalizovaná pre rie¹enie problému N Dám), ktorá implementuje spracovanie informácií. Pri po¾iadavke o~spustenie/pozastavenie výpoètu spracovania úlohy sa predá v~HTTP po¾iadavky ID úlohy. Webová slu¾ba následne zaradí po¾iadavok o~spustení do JMS fronty. Message-driven bean-a následne postupne odoberá po¾iadavky z~fronty a vyhodnocuje. Pritom najprv nájde potrebný XML definièný súbor v~databáze a spustí výpoèet pomocou OptaPlanner. Priebe¾né informácie(èas do skonèenia plánovania, pokrok vo výpoète) sú priebe¾ne vkladané do databáze, èo umo¾òuje u¾ívateµovi prostredníctvom rozhrania sledova» stav úlohy. Pozastavenie úlohy dôjde prostredníctvom zmeny stavu vo webovej slu¾be, èo pozastaví plánovanie.


\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.4]{work.jpg} 
\caption{Diagram komunikácie}
\label{work}

\end{center}

\end{figure}
Na obrázku è.\ref{work} je popísané spôsob komunikácie u¾ívateµského rozhrania s~PlannerService(OptaPlanner). 1.krokom je vytvorenie XML súboru plánovacieho problému prostredníctvom u¾ívateµského rozhrania a následne ulo¾enie definície do databáze. 2.krok je zaslanie ¾iadosti s~ID úlohy o~spustenie/zastavenie prostredníctvom webovej slu¾by PlannerService(OptaPlanner), ktorý ¾iados» spracuje. Ten v~3. kroku získa z~databáze potrebný definièný XML súbor. Následne sa spustí plánovanie a priebe¾ne sa ukladajú v~kroku è. 4 informácie o~pokroku úlohy, a èase ukonèenia úlohy. Následne u¾ívateµské rozhranie v~kroku è. 5 pravidelne získava informácie o~úlohe z~databáze a zobrazuje ich v~prehµadnej tabulke.

Celý návrh aplikácie bol otestovaný prostredníctvom skupiny odborných a laických u¾ívateµov s~cieµom zdôrazni» rýchlu uèiacu sa krivku u¾ívateµského rozhrania. Následne prebiehalo testovanie prostredníctvom u¾ívateµov, ktorý testovali validáciu vstupov, prihlasovanie, správne vyhµadávanie jednotlivých entít(úloh, u¾ívateåov, organizácií).

\subsection{Návrh modelu databáze}
Na nasledujúcom obrázku je ukázaný ER diagram, ktorý bol pou¾itý pre dtabázu:
\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.7]{ER.jpg} 
\caption{ER diagram}
\label{ER}

\end{center}

\end{figure}

Tento obrázok zobrazuje jednotlivé entity, ktoré sú potrebné na ulo¾enie v~databáze, ka¾dá z~nich ma urèité polo¾ky. ER diagram sa skladá z~3 entít: user - entita, ktorá reprezentuje u¾ívateµa, task - entita, ktorá reprezentuje úlohu a organization - entita, ktorá reprezentuje organizáciu. Výsledný návrh odpovedá skutoènosti, ¾e ka¾dý u¾ívateµ musí by» súèa¹»ou organizácia, rovnako mô¾e ma» vytvorené 0 a¾ N úloh. Taktie¾ pre zjednodu¹enie je ka¾da úloha priradená priamo organizácií pre zlep¹enie rýchlosti získania výsledkou a zjednodu¹enia ich nájdenia. Ka¾dá entita obsahuje primárny kµúè(jedná sa o~silné entitné mno¾iny), ktorý je odvodený od názvu a zaèína predponou \uv{id\_} a pokraèuje názvom entity s~CamelCase notáciou(ka¾dé slovo zaèína veµkým písmenom a slová sú spojené dokopy). Poïme sa pozrie» bli¾¹ie na jednotlivé entity. Entitná mno¾ina organization obsahuje 2 polo¾ky jednou z~nich je primárny klúè a ïal¹ou názov organizácia podµa, ktorej sú zaraïovaný jednotlivý u¾ívatelia. Ïalej prejdime k~entitnej mno¾ine user. Táto entita má rovnako primárny kµúè. Ïalej obsahuje polo¾ku pre u¾ívateµské meno(username), heslo(password), email, u¾ívateµskú rolu(role) a cudzí kµúè organization, ktorý obsahuje na odkaz na organizáciu, ku ktorej je u¾ívateµ priradený. Nakoniec prejdime k~entitnej mno¾ine task. Táto entitná mno¾ina obsahuje primárny kµúè, ïalej obsahuje XML súbor, ktorý reprezentuje danú úlohu(v na¹om prípade N dám), stav úloh(stateOfTask, ktorý reprezentuje rôzne stavy úlohy), ktorý si podrobnej¹ie rozobereme. Úloha sa mô¾e nachádza» v~jednom z~nasledujúcich stavov:
\begin{itemize}
\item NEW - úloha bola vytvorená
\item MODIFIED - XML súbor bol modifikovaný
\item WAITING - úloha èaká na spracovanie
\item IN\_PROGRESS - práve prebieha výpoèet
\item PAUSED - úloha je pozastavená
\item COMPLETE - úloha je dokonèená
\end{itemize}
Entitná mno¾ina task ïalej obsahuje polo¾ku, ktorá percentuálne hodnotí stav výpoètu úlohy(progressOfTask), èas do skonèenia výpoètu úlohy(eta), nastavenie úlohy na privátnu alebo verejnú(ifPublic), názov úlohy(name) a cudzie kµúce user, ktorý odkazuje na u¾ívateµa, ktorým bola úloha vytvorená a organization, ktorá odkazuje na organizáciu u¾ívateµa, ktorým bola vytvorená. 

\subsection{Návrh u¾ívateµského rozhrania}
Výsledné rozhranie kladie dôraz na jednoduchos» a prehµadnos» zobrazených úloh. Z~tôhto dôvodu boli implementované mechanizmy vyhµadávanie úloh, organizácií a u¾ívateµov. Rovnako mo¾nosti lexikografického triedenia. Po prihlásení do systému Jednotlivé mô¾nosti sú následe zakomponované do zálo¾iek, v~ktorých je sprístupnená príslu¹ná funkènos». Výsledné rozhranie je prenositeµné aj na mobilné zaradenie. U¾ívateµské rozhranie je popísané na nasledujúcom obrázku:
\begin{figure}[htb]

\begin{center}

\includegraphics[scale=0.4]{page.jpg} 
\caption{Návrh u¾ívateµského rozhrania}
\label{rozhranie}

\end{center}

\end{figure}
Na obrázku è.\ref{rozhranie} mô¾me vidie» návrh u¾ívateµského rozhrania. Rozhranie je rozdelené do 6 èastí, ktoré mô¾me rozozna» na obrázku èíslami od 1 do 6, ktoré sú aj ohranièené. Celé rozhranie mô¾me rozdeli» do nasledujúcich èastí:
\begin{itemize}
\item Oblas» è.1 predstavuje navigaèné menu, kde sú jednotlivé akcie rozdelené do zálo¾iek podµa ich názvu. Pre klinutí na príslu¹nú zálo¾ku sa zmení aj obsah na stránke. 
\item Oblas» è.2 obsahuje informáciu o~prihlásenom u¾ívateµovi , rovnako obsahuje aj tlaèidlo \uv{Logout}, prostredníctvom ktorého sa mô¾e u¾ívateµ z~aplikácie odhlási»
\item Oblas» è.6 predstavuje funkènú oblas». Táto oblas» je ¹pecifická pre ka¾dú zálo¾ka, ktorá reprezentuje jej obsah. V~tej oblasti sú umiestnené typicky obsahy databázových tabuliek, nástroje na vyhµadávanie, rôzne akcie, ktoré je mo¾né vykonáva» s~dátami, rovnako aj mo¾nosti na vytváranie entít
\item Oblas» è.3 predstavuje jednu z~funkèných mo¾ností. Jedná sa o~vyhµadávanie, ktoré je zlo¾ené zo vstupného prvky, do ktorého zadamé vyhµadávaný re»azec a druhá èas» predstavuje menu,z ktorého zvolíme ståpec na vyhµadávanie. Následne je mo¾nos» realizova» tlaèidlom Find, ktoré prekreslí obsah tabulky ni¾¹ie a naplní ju nájdenými výsledkami.
\item Oblas» è.4 predstavuje tabulky, ktorá je dynamicky obnovaná a reaguje na asychronné ukladanie dát z~web service, ktoré sa dynamicky obnovujú ka¾dé 4 sekundy. Tabuµka je rozdelená do ståpcov. Názvy ståpcov, ktoré sú oznaèené modrou farbou sú zároveò odkazy, na ktoré je mo¾né klinú». Po kliknutí na daný odkaz dôjde k~lexikografickému zoradeniu obsahu tabuµky podla daného ståpca striedavo vzostupne alebo zostupne. Rád by som upozornil na ståpec progress, ktorý pre ka¾dú úlohu zobrazuje stav spracovania úlohy. Rovnako musím zdôrazni» ståpec Permission, ktorý zobrazuje, èi je úloha verejná alebo privátna. Pokiaµ je úloha verejná(Public), tak je tento odkaz zobrazený modrou farbou, èo znamená, ¾e je odkaz preto je mo¾né naò ho kliknú». Po kliknutí sa zobrazí stránka s~informáciami o~názve úlohy a obsahuje výsledného xml súboru. Tento odkaz je mo¾né následne µubovolne preposla» a pristupova» k~nemu. V~poslednom rade treba zdôrazni» ståpec \uv{Actions}, ktorý je najdôle¾itej¹í pre ka¾dú úlohu povoluje sadu akcií. Jednotlivé akcie sú reprezentované tlaèidlami, pritom odrá¾ajú aktuálny stav spracovania úlohy spolu s~ïal¹ími informácimi o~úlohe.
\item Oblas» è.5 predstavuje komponentu na stránkovanie, aby pri rozsiahlom obsahu sa nezväè¹oval neúmerne veµkos» stránky.


\end{itemize}

Zvy¹né návrhy rozhrania pre vytvorenie úlohy, editovanie úlohy, spravovanie u¾ívateµov, spravovanie organizácií, zmenu hesla a prihlasovanie je mo¾né dohµada» v~prílohe.


\chapter{Implementácie}\label{implc}
Nasledujúca kapitola pojedná o~oboch èastiach systému pre monitorovanie stavu plánovacích úloh.  Najprv rozobereme aplikáciu pre u¾ívateµské rozhranie \ref{approz} a následne PlannerService \ref{plannerapp}, ktorá zabezpeèuje rie¹enie plánovacích úloh prostredníctvom OptaPlanner-u. Pre technológiu MySQL bol zvolený MySQL server vo verzii 5.5.37. Obe èas» boli zalo¾ené na nástroji maven s~pou¾itím vývojové prostredia JBoss Developer Studio vo verzii 7.1.0 GA\cite{mavenbook}. 


\section{Aplikácie pre u¾ívateµské rozhranie}\label{approz}
Aplikácie pre u¾ívateµské rozhranie, ktorá je schopná zobrazova» informácie o~úlohách, u¾ívateµoch a organizáciach a umo¾òova» ich správu. Základom tejto aplikácie je komunikácia s~databázou. Komunikáciu zabezpeèuje JBoss a to tak, ¾e sa v~súbore persistence.xml pre na¹u aplikáciu(\emph{optapanner.controller}) správne nastaví odkaz na datasource a definíciu entitných tried.
	

\subsection{Prihlasovanie}
Prihlasovanie je realizované prostredníctvom frameworku Seam. Základom je vytvorenie komponent na XHTML stránke pre zadanie mena a hesla u¾ívateµa. Tieto údaje sú spracované v~backing bean-e(triede) s~názvom \emph{LoginBean}, ktorá je súèas»ou balíku \\\emph{org.jboss.optaplanner.controller.beans}. Táto trieda obsahuje aj validátory(metódy validateUsername/validatePassword), ktoré kontrolujú existenciu u¾ívateµa a správnos» hesla v~prípade, ¾e existuje a podµa zistených informácií(existuje u¾ívateµ/neexistuje, validné/nevalidné heslo) sa zobrazí komponenta \emph{h:outputText}, ktorá obsahuje príslu¹ný text.

V~prípade, ¾e validácia prebehne úspe¹ne zavolá sa metóda \emph{authenticate}, ktorá zabezpeèí získanie u¾ívateµskej role zadaného u¾ívateµa, ktorú následne vlo¾í do ¾ivotného cyklu aplikácie pomocou metódy \emph{setUser}, a to pomocou triedy \emph{org.picketlink.idm.api.User} sa vlo¾í ID u¾ívateµa a u¾ívateµská rola.

Navigácia u¾ívateµa sa realizuje nastavením navigaèných pravidiel v~súbore \\\emph{faces-config.xml}, do ktorého sa podµa u¾ívateµske role u¾ívateµa nastaví hodnota premennej \\isX(Admin/Planner/Reader) na hodnotu TRUE a zabezpeèí presmerovanie u¾ívateµa na stránku podµa role:
\begin{itemize}
\item Rola Administrator bude presmerovaná na stránku Administrator.xhtml 
\item Rola Planner bude presmerovaná na stránku Planner.xhtml
\item Rola Reader bude presmerovaná na stránku Reader.xhtml
\end{itemize}

Úspe¹né prihlásenie je dané nastavení metódy \emph{setStatus} na hodnotu SUCCESS, v~prípade, ¾e validácia údajov neprebehne úspe¹ne nastavíme prihlasovanie na neúspe¹né prostredníctvom metódy \emph{setStatus} na hodnotu FAILURE. Po uspe¹nom prihlásení je mo¾né identitu µahko získa» nainjektovaním(uvedením anotácie @Inject) triedy Identity, z~ktorej je mo¾né získa» prihlasovacie meno u¾ívateµa, ktorá sa zobrazuje na stránke.

Problematika odhlasovania úzko súvisí s~prihlasovaním a je v~podstate jednoduchá. Na XHTML stránke sa nachádza grafická komponenta \emph{h:commandButton}, ktorá v~atribúte action volá metódu logout pre príslu¹nú backing beanu. Tá spôsobí zavolanie metódy identity.logout, ktorá odobere identitu daného u¾ívateµa(zamedzí mu opätovnú prístup k~stránke podµa jeho role) a presmeruje ho na prihlasovacie stránku(Login.xhtml).

\subsection{Zabezpeèenie}
Úzko s~prihlasovaním súvisí aj prolematika zabezpeèenia aplikácie proti neutorizovanému prístupu. Teda povedzme u¾ívateµ s~rolou Planner by chcel pristúpi» na stránku, ktorá je urèená pre rolu Administrator. Aplikácia mu to nedovolí a v~prípade o~takýto pokus bude u¾ívateµ presmerovaný naspä» na prihlasovaciu stránku. Princíp je taký nájden rozhranie, ktoré je anotovaná anotáciu @ViewConfig. Táto trieda obsahuje výpoètový typ, ktorý obsahuje anotácie @ViewPattern, ktorej obsah je stránka, na ktorú má by» povolený prístup. Pri ka¾dej takej anotácií je nachádza názov u¾ívateµskej role uvedený prostredníctvom anotácie. Pou¾itie názvu u¾ívateµskej role je dané vytvorením ¹peciálneho rozhrania, ktoré je anotované anotáciu \emph{SecurityBindingType}. Uvedenie anotovanej u¾ívateµskej role vedµa stránky, ktorá má by» povolená spôsobí zavolenie triedy \emph{Autorization}, ktorá je anotovaná anotáciu \emph{Service}, ktorá overí vlo¾enú identitu prostredníctvom metódy \emph{authenticate} z~triedy \emph{LoginBean} a vráti odpoveï. Takýmto spôsobom sa povolí prístup pre u¾ívateµskú rolu na danú stránku. Veïla ka¾dej anotácie @ViewPattern sa nachádza aj anotácia \emph{AccessDeniedView}, ktorá spôsobí presmerovaní na jej obsah, v~prípade, ¾e prihlásený u¾ívateµ nemá danú u¾ívateµskú rolu. Tento postup sa opakuje neustále v~prípade pokusu o~prístup k~akejkoµvek stránke uvedenej rozhraní anotovaní anotáciou \emph{ViewConfig}.



\subsection{Komunikácie s~PlannerService}
Základom komunikácie s~výpoètou èas»ou systému PlannerService je vygenerovanie klienta z~WSDL súboru webovej slu¾by. Preto bolo potrebné vykona» nasledovné kroky:
\begin{itemize}
\item Nasadenie PlannerService na JBoss
\item Zavolanie skriptu wsconsume.sh, ktorý je súèas»ou aplikaèného serveru s~prepínaèom -k a cestou k~WSDL súboru
\item Skopírovanie vygenerovaných tried do aplikácie pre u¾ívateµské rozhranie do balíku \emph{org.jboss.optaplanner.controller.service}
\end{itemize}
Po týchto krokoch sa v~metóde \emph{runTask} a \emph{stopTask} volá metóda, ktorá vytvorí webovú slu¾bu a zavolá metódu runTask/pauseTask, ktoré sú súèas»ou PlannerService s~argumentom ID úlohy. Tieto metódy sú súèas»ou backing bean pre u¾ívateµsku rolu Planner a Administrator.


\subsection{Logika aplikácie}
Pre ka¾dú u¾ívateµskú rolu bola vytvorená 1 XHTML stránka a backing beana a to nasledovne:
\begin{itemize}
\item Pre rolu Administrator je urèená stránka Administrator.xhtml a backing beana(trieda) \emph{AdministratorBean}
\item Pre rolu Planner je urèená stránka Planner.xhtml a backing beana(trieda) \emph{PlannerBean}
\item Pre rolu Reader je urèená stránka Reader.xhtml a backing beana(trieda) \emph{ReaderBean}
\end{itemize}
V¹etky backing beany sú súèas»ou balíka \emph{org.jboss.optaplanner.controller.beans}. Aby beany mohli by» správne pou¾ívané je potrebné ich uvies» v~súbore faces-config.xml. To sa urobí uvedením medzi znaèky \emph{managed-bean}, kde uvedieme názov beany, triedu vrátane cesty v~hierarchii balíkov a typ beany(ktorý bol zvolený na session). Backing bean-y obsahujú metódy a vlastnosti, ktoré bola zobrazované/prevzaté z~komponent na .xhtml stránkach. V¹etky vlasnosti museli spåòa» princíp POJO. Pre potreby získavania dát z~databáze bola pou¾itá trieda \emph{databaseOp}, ktorá je súèas»ou balíku \\\emph{org.jboss.optaplanner.controller.database}, prièom vytvára in¹tanciu triedy EntityManager, ktorý vyu¾íva entitné triedy. Táto trieda obsahuje metódy na vytváranie úloh, u¾ívateµov, organizácií, rovnako aj mazanie, editovanie jednotlivých polo¾iek, rovnako aj získavanie. Tieto dáta sú následne predávané backing bean-ám podµa potreby.


\subsection{Implementácia rozhrania}
Pre implementáciu rozhrania bola pou¾itá technológia XHTML stránok. Pre ka¾dú u¾ívateµskú rolu bola vytvorená XHTML stránku identitická s~názvom u¾ívateµskej role. Pre prihlasovanie bola pou¾itá  stránka Login.xhtml stránka. Na Login.xhtml boli umiestnené komponenty na zadanie u¾ívateµského mena a hesla vrátane skrytých validaèných komponent. Na tejto stránke boli pou¾ité správne CSS frameworky na zabezpeèenie prenositeµnosti na mobilné zariadenia a zároveò poskytli u¾ívateµskú prívetivos».

Pri implementáciu XHTML stránok pre u¾ívateµské role sa zameriam na u¾ívateµskú rolu Administrátor, keï¾e rola Plánovaè a Èitateµ prevzali v¹etku implementáciu a komponenty práve od Administrátor, ale len v~obmedzenom mno¾stve, teda komponenty vrátane akcií, ktoré mohli vykonáva». XHTML stránka sa skladá v~hornej èasti z~menu, ktoré je implementované ako zálo¾ky. V~pravej hornej èasti sa nachádza informácia o~prihlásenom u¾ívatelovi vrátane tlaèidla na odhlásenie.  


Pri kliknutí na zálo¾ky sa zobrazí obsah, ktorý odpovedá názvu zálo¾ku. Zálo¾ky \uv{user management, task, organization management} obsahujú komponenty h:datatable z~kni¾nice JSF pre zobrazenie dát. Tieto dáta sú pravidelné obnovované z~databáze, èo zabezpeèuje ich aktuálnos» prostredníctvom komponenty a4j:poll, ktorá je vytvorená pre ka¾dú tabuµku a pravidelne volá metódu, ktorá získava údaje z~databáze. Ka¾dá z~tých zálo¾iek obsahuje pole pre vyhµadávanie, prièom je mo¾né zvoli» podµa, ktorého ståpca sa bude vyhµadáva». Výsledky sa zobrazia do tabuµky(h:datatable) prièom zobrazené polo¾ky budú odpoveda» nájdeným výsledkom. Pri vyhµadávaní sa preru¹ení obnovanie obsahu tabuliek a zobrazí sa informácie o~vyhµadávanom re»azci a èasovom razítku kedy bolo vyhµadávanie realizované. S~vyhµadanými polo¾kami je rovnako mo¾né realizova» v¹etky akcie. Pre potreby opätovného obnovenia obsahu tabuµky je potrebné stlaèi» tlaèidlo pod tabuµkou s~názvom \emph{showX(Users,Tasks,Organizations)}, ktoré sa nachádza na bielom páse pre rýchlej¹ie zorientovanie u¾ívateµa. Toto tlaèidlo spôsobí pre danú tabuµku(users,taks,organizations) získanie aktuálnych dát z~databáze zavolaním metódy z~triedy \emph{databaseOp} \\getAllX(Tasks/Users/Organizations), ktoré vytvoria dotaz na získanie aktuálnych dát z~databáze. Tieto dáta sú predané príslu¹nej tabuµke a zároveò sa obnoví obnovovanie obsahu tabuliek.

 Pri ka¾dej polo¾ke v~tabuµke je mo¾né vykonáva» isté akcie ako je vymaza» danú entitu(task,user,organization), po prípade ju editova», alebo vykonáva» mno¾stvo iných akcií. Akcie pritom reflektujú individuálny stav danej entity. Pri ka¾dej z~tých zálo¾iek okrem task(ktorú v~zápäti rozoberem) je mo¾né entity aj vytvára». Vytváranie je veµmi jednoduché, keï u¾ívateµ vyplní v¹etky polia, ktoré musí ma» daná entita sa zavolá metódu z~backing beany(napr. na editovanie editTask, na vytvorenie organizácie createOrganization, \ldots), ktoré spôsobia zavolanie metódy z~triedy \emph{databaseOp}, ktoré zabezpeèia vytvorenie novej entity. 

 Ka¾dú tabuµke je mo¾né aj radi». Radenie prebieha kliknutím na názov ståpca tabuµky(zvýraznený modrou farbou), prièom danú ståpec implementuje funkciu radenia pre daný ståpec. Pri kliknutí na názov ståpca dôjde k~zavolanie metódy(napr. pre ståpec ID sa zavolá metóda sortById), ktorá je daná atribútom action v~grafickej komponente \emph{h:commandLink}. Metóda radenia je implementovaná prostredníctvom triedy \emph{Collections}, ktorá obsahuje metódu sort, ktoré triedia model(trieda, ktorá obsahuje rovnaké polo¾ky ako príslu¹na databázová tabuµka) danej entity, ktorá vytvorí komparátor, ktorý porovná 2 polo¾ky daného modelu a upraví ich poradie.


Vytváranie úloh(taskov) je zaradené do samostatnej zálo¾ky kvôli lep¹ej prehµadnosti. U¾ívateµ vyplní názov a prostredníctvom komponenty na nahrávanie súboru z~kni¾nice Rich Faces nahrá obsah do databáze. Ïalej rozoberem zálo¾ku change password, ktorá umo¾òuje si pre daného u¾ívateµa zmeni» heslo, vyplní pritom heslo a potvrdenie heslo a heslo sa zmení. Nakoniec rozoberem zálo¾ku edittask, táto zálo¾ka je pri be¾nom prehliadaní nevidelná je to spravené kvôli bezpeènosti. Táto zálo¾ka sa aktivuje editovaním úlohy v~zálo¾ke task v~tabuµke tlaèidlom Edit Task, ktorá nás prepne do zálo¾ky Edit Task, v~ktorej sa u¾ aktivuje obsah a u¾ívateµ vyplní názov úlohy,vlastníka úlohy a nakoniec edituje xml súbor úlohy. Potvrdením sa vytvorí úloha so stavom \uv{MODIFIED}.


\subsection{Publikovanie úloh}
Ïal¹ou podstatnou èas»ou aplikácie pre u¾ívateµské rozhranie je mo¾nos» \\publikova»/odpublikova» úlohu(task). Túto akciu je mo¾né realizova» prostredníctvom tlaèidla v~tabuµke Publish Task/Unpublish Task. Tieto tlaèidlá nie sú v¾dy prístupné, podmienkou je, ¾e úloha je nastavená ako privátna a nachádza v~stave \uv{MODIFIED} alebo \uv{COMPLETE}. Naopak odpublikovanie úlohy je mo¾né kedykoµvek podmienkou je, aby úloha bola nastavená ako verejná(public). Publikovanie je realizovaná zavolaním metódy \uv{publishTask}. V~tejto metóde dôjde k~zmene stavu úlohy na verejenú, prièom informácia sa ulo¾í do databáze. Následne sa v~ståpci permission zobrazí text \emph{Public} modrou farbou, ktorý po kliknutí zobrazí názov úlohy a XML súbor plánovacej úlohy. Prièom po kliknutí sa prejde na odkaz \emph{url aplikácie/task/id úlohy}. Na èas» URL task/id je namapovaná rest webová slu¾ba, ktorá je súèas»ou balíku \emph{org.jboss.optaplanner.controller.restservice}, kde sa nachádza trieda \emph{RESTPublishTask}, ktorá reprezentuje práve túto slu¾bu starajúcu sa o~publikovanie úloh. Táto úloha obsahuje v~anotácií @Path() len znak \uv{/},èo znamená ¾e sa namapuje na akékoµvek URL, ale namapovanie na re»azec task sa realizuje v~súbore web.xml. Táto slu¾ba obsahuje 1 metóda \uv{getUserById}, ktorá dostane ako parameter ID úlohy. Toto id úlohy získa zo zadaného URL. Dôle¾itou anotáciu je anotácia @Produces(), ktorá obsahuje hodnotu \uv{text/html}, ktorá hovorí, ¾e vrátená odpoveï metódy bude HTML súbor a teda výsledok bude zobrazený v~prehliadaèi. Táto metóda na svojom zaèiatku vytiahne informácie o~úlohe(názov, XML súbor a povolenie). Na základe povolenia urèí, èi je úloha nastavená ako verejná, ak nie je vráti prázdnu stránku. V~prípade, ¾e je úloha verejná vráti stránku, ktorá obsahuje informáciu o~názvu úlohy a XML súbor. Prístup k~tomuto k~tejto slu¾be nie je podmienený prihlasovaním.


\subsection{Validácia}
V¹etky grafické komponenty obsahujú validáciu na neprázdne, niektoré aj na nevalidné komponenty. V¹etky komponenty, do ktorých sa zadáva nejaká informácia je realizovaná grafickou komponentou \emph{h:inputText}, ktoré spracovávajú u¾ívateµské vstupy. Ka¾dá komponenta obsahuje atribút \emph{required} nastavenú na hodnotu true, ktorá spôsobí automatickú validáciu v~prípade nezadanej hodnoty. Ka¾dá komponenta obsahuje aj atribút \emph{requiredMessage}, ktorý ako hodnotu obsahuje re»azec, ktorý sa zobrazí v~prípade, ¾e nie je zadaná hodnota. Rovnako obsahuje aj atribút ID s~nejakou jedineènou hodnotou pre identifikáciu komponenty. Aby informácia o~nezadaní bola zobrazená je potrebné vytvori» komponentu h:message, ktorá obsahuje atribút for, ktorý obsahuje id h:inputText komponenty, pre ktorú má by» správa zobrazená. Niektoré komponenty(napr. validácia prihlásenia) sú validované na základe validátorov, ktoré obsahujú odkaz na metódy v~triede \emph{LoginBean}, ktoré v~prípade potreby nastavia zobrazenie komponenty h:outputText prostredníctvom nastavenia atribútu rendered na hodnotu true, prièom táto komponenta obsahuje text podµa danej situácie(napr. neznámy u¾ívateµ, nevalidné heslo). V~opaènom prípade je komponenta skrytá, teda hodnota atribútu je nastavená na hodnotu false.




\section{PlannerService}\label{plannerapp}
PlannerService predstavuje èas» systému pre monitorovania, ktorá zabezpeèuje spracovanie po¾iadavok od aplikácie z~u¾ívateµského rozhrania. Základom je trieda \emph{OptaPlanerWebService}, ktorá predstavuje \uv{Big} webovú slu¾bu, ktorá je súèas»ou balíku \\\emph{org.jboss.optaplanner.service.server}. Tá je ¹peciálne anotovaná prostredníctvom anotácie @WebService, ktorá oznaèuje, ¾e daná trieda je webovou slu¾bou. Tá obsahuje 2 metódy \uv{runTask} a \uv{pauseTask}, ktoré sú anotované anotácou @WebMethod, a sú teda prístupne a mô¾u by» vzdialene zavolané klientom(aplikáciou pre u¾ívateµské rozhranie). Ako argument obsahujú metódy hodnotu typu long, ktorá predstavuje ID plánovacej úlohy, s~ktorou sa má daná akcia vykona».

Druhou dôle¾itou triedou je \emph{OptaPlannerMessageBean}, ktorá je súèa¹tou balíku \\\emph{org.jboss.optaplanner.service.server}. Táto trieda predstavuje Message-driven bean-u a je anotovaná anotáciu @MessageDriven a pre prijímanie po¾iadavkov vyu¾íva JMS frontu s~názvom \emph{OptaPlanner}.

Základným predpokladom je korektné nastavenie súboru persitence.xml, ktorý odkazuje na entitné triedy a odkaz na datasource.

Princíp fungovania tejto èasti systému je nasledujúca:
\begin{itemize}
\item Klient(aplikácia u¾ívateµského rozhrania) zadá po¾iadavok na spustenie/pozastavenie úlohy, ktorú realizuje zavolaním metódy webovej slu¾ny PlannerService s~ID plánovacej úlohy
\item Metóda runTask PlannerService vytvorí spojenie s~triedou \emph{OptaPlannerMessageBean}, a následne vlo¾ením správy s~ID úlohy do JMS fronty \emph{OptaPlanner}
\item Trieda \emph{OptaPlannerMessageBean}, ktorá je Message-driven bean tá obsahuje odkaz rovnako na JMS frontu \emph{OptaPlanner}. Tá obsahuje metódu \emph{onMessage}, ktorá zabezpeèuje spracovánie správ z~JMS fronty \emph{OptaPlanner} správu po správe
\item Metóda \emph{onMessage} získa zo správy ID úlohy, ktorú následne získa z~databáze, zmení stav úlohy na \emph{IN\_PROGRESS} a vytvorí in¹tanciu triedy \emph{ProblemSolver}, ktorej kon¹truktor dostane ako parameter XML súbor plánovacej úlohy z~databáze. Táto trieda je súèa¹tou balíku \\\emph{org.jboss.optaplanner.service.solver}. Po vykonaní tohto kroku sa spustí metóda \emph{run}, ktorá nastaví konfiguráciu pre rie¹enie problému N Dám. Následne sa zavolá metóda \emph{execute}, ktorá spustí výpoèet(rie¹enie).
\item V~message-driven bean sa v~cykle neustále získava skóre z~triedy \emph{ProblemSolver} na základe, ktorého sa poèítajú hodnoty do èasu skonèenia úlohy a pokroku, ktoré sa zapisujú do databáze.
\item Po ukonèení/vyrie¹ení úlohy sa z~triedy \emph{ProblemSolver} získa najlep¹ie rie¹enie(XML predpis), ktorý sa ulo¾í do databáze s~informáciami o~dokonèení úlohy(zmení stav úlohy na \emph{COMPLETE})
\item Tento postup sa opakuje pre v¹etky správy v~JMS fronte \emph{OptaPlanner}
\end{itemize}

Na koniec spomeniem princíp fungovania metódy na pozastavenie vykonávania plánovania:
\begin{itemize}
\item Klient(aplikácie u¾ívateµského rozhrania) zavolá metódu \emph{pauseTask} s~argumentom ID úlohy, ktorá sa má pozastavi»
\item Metóda \emph{pauseTask} triedy \emph{OptaPlannerWebService} spôsobí zmenu stav úlohu na \\\emph{PAUSE}
\item Message-driven bean v~metóde \emph{onMessage} neustále obnovuje hodnoty o~priebehu vykonávaní funkcie a podmienke cyklu je podmienka,¾e úloha je nastavená na stav \emph{IN\_PROGRESS}. Teda v~prípade zmeny stavu sa cyklus zastaví a teda aj výpoèet(rie¹enie)
\end{itemize}
	
	



 
\section{Testovanie}
Testovanie prebiehalo na servery JBoss AS 7.1.1 Final najprv prostredníctvom jednodúch JUnit testov, ktoré malo overi» komplikovanú fukènos» metód. Následne sa pre overenie fukènosti databáze pou¾il framework Arqullian, ktorý umo¾òuje nasadenie tried priamo do Java EE kontajneru, èo zjednodu¹uje testovanie. Prostredníctvom tohto frameworku sa testovala celková fukènos» aplikácie. Jednoduch¹ie èasti boli otestované pomocou JUnit testov. Postupným budovaním aplikácie sa pristupovalo k~testovaniu navrhnutých èastí. Junit boli postupne skon¹truované pre jednoduch¹ie metódy, ako je overenie funkènosti vyhµadávania entít, mazanie entít, pridanie entít do zoznamu úloh. 


V~ïal¹ej èastie prebiehalo testovanie medzi konkrétnymi u¾ívateµmi. I¹lo o~4 informaticky skúsených u¾ívateµov a 4 laikov. U¾ívatelia testovali celkovú funkènos» aplikácie a hµadali prípadné chyby, ktoré neodhalilo predo¹lé testovanie. Aplikácia bola vlo¾ená na cloudovú slu¾bu OpenShift, ktorá umo¾nila prístup k~aplikácií prostredníctvom internetu. Následne bol skupine u¾ívateµov predlo¾ený odkaz na nasadenú aplikáciu a prihlasovacie údaje k~u¾ívateµovi s~rolou Administrator,Planner a Reader. 

U¾ívatelia nasledne testovali vytváranie u¾ívatelov, organizácií, úloh. Následne mohli sledova» stav spracovania plánovacich úloh. Aplikáciu otestovali pod 2 prehliadaèmi a to Google Chrome vo verzii 34.0 a Mozilla Firefox verzie 28.0. Bol pou¾itý operaèný systém linux 3.13.0-24-generic s~operaèným systémom Kubuntu 14.04.Aplikácia sa správala pod obomi rovnako a korektne. Po odhalení chýb boli chyby ohlásené a odstránené a aplikácia bola následne opä» nasadená. Tento postup sa opakoval a¾ dokým neboli odhalené v¹etky chyby. Na záver zhrniem testy, ktoré boli u¾ívateµmi realizované:
\begin{itemize}
\item Overenie funkènosti prihlasovania s~validnými/nevalidnými údajmi
\item Overenie fukènosti zálo¾ky task(úloh) - mazanie úloh, editovanie úloh, vyhµadávanie úloh vrátanie validácie, publikovanie/odpublikovanie úloh, navigácia medzi stránkami úloh tabuµky, pri editovaní úlohy sa overovalo skrytie zálo¾ky edit task pri kliknutí na inú zálo¾ku, radenie úloh podµa v¹etkých ståpcov
\item Overovanie fukènosti zálo¾ky user(u¾ívateµ) - vytváranie nového u¾ívateµa s~validnými/nevalidnými údajmi, vyhµadávanie u¾ívatelov vrátanie zadania nevalidaných údajov, mazanie u¾ívateµov, editovanie informácií o~u¾ívateµoch, zmena hesla u¾ívateµovi
\item Overenie funkènosti zálo¾ky organization(organizácia) - vytváranie organizácie, vrátane vyhµadávania s~validnými/nevalidnými údajmi, radenie organizácii, mazanie organizácií, editovanie názvu organizácie
\item Overenie funkènosti zálo¾ky changepassword(zmena hesla) - zmenu hesla s~validnými/nevalidnými údajmi pre aktuálne prihláseného u¾ívateµa
\item Testovanie u¾ívateµskej prívetivosti rozhrania skúsenými a laickými u¾ívateµmi, rovnako otestovanie u¾ívateµského rozhrania na mobilnom telefóne
\end{itemize}

Rovnako boli u¾ívateµom predlo¾ené XML súboru pre rie¹enie problému N Dám v~rozlo¾ení pri 4,8,16 dám. U¾ívatelia nahrali tieto súbory do systému a sledovali priebeh rie¹enia plánovacieho problému prostredníctvom PlannerService.

U¾ívateµské rozhranie bolo otestované pre mobilné telefóny na zariadení HUAWEI Honour 2 s~prehliadaèom Mozzila Firefox, v~ktorom sa zobrazovalo korektne.



\section{Vyhodnotenie aplikácie}
Po testovacej fáze nasledovala fáza vyhodnotenia aplikácie. Cieµovej skupine bol po opravení chýb aplikácie predlo¾ený dotazník, do ktoréh výplòami rôzne informácie, kde dávali spätnú väzby, chyby v~návrhu, rovnako aj v~intuitívnosti ovládania. Cieµovou skupinou aplikácie sú u¾ívatelia bez akejkoµvek predchádzajúcej skúsenosti s~touto aplikáciou s~vekým rozsahom medzi 20 - 40 rokov. Preto bola aplikácia predlo¾ená najprv u¾ívateµom skúseným, ktorým bol poskytnutý predchádzajúci styk s~aplikáciou a lacikým u¾ívateµom, ktorý nemali ¾iadny predchádzajúci styk. Výsledkom zistenia, rovnako vyplyvajúce z~výsledkou dotazníka je ¾e u¾ívateµské rozhrania a¾ na niektoré èasti je veµmi intuitívne. U¾ívatelia sa ihneï vedeli zorientova» a vykona» danú akciu, vytvori» u¾ívatela, organizáciu, úlohu. Problém na, ktorý narazili bolo zorientova» pri vyhµadávaní úloh/u¾ívateµov/organizácií a nájs» tlaèidlo pod tabuµkou  a obnovi» v¹etky údaje v~tabuµke. Rovnako oceòovali mo¾nos» zobrazovanie tlaèidla \emph{Save Changes} pri editovaní tabuµky vedµa polo¾ky, ktorá je práve editovaná v~danom riadku. Pri vyhµadávaní ocenili u¾ívatelia zachovania zadaných informácií pre vyhµadávanie. V~zálo¾ke user management(správa u¾ívateµov) navrhovalo presunutie tabuµky s~u¾ívateµmi na zaèiatok, keï¾e sa nachádzala na neprehµadnom mieste. U¾ívatelia ocenili mo¾nos» radenia tabuliek po kliknutí na daný ståpec aj spôsob realizácie. U¾ívatelia by ocenili pri úlohách ma» mo¾nos» informácie o~èasovom razítku vytvorení úlohy. Prehliadania pomocou tabuliek im pri¹lo ako veµmi vhodné rovnako aj pou¾itie stránkovania. U¾ívateµom chýbala mo¾nos» vyhµadáva» poïla viacerých kritérií.



Aplíkácia by mohla by» upravená do u¾ívateµsky prívetivej¹ieho rozhrania a mohli by» zahrnuté v¹etky názory u¾ívateµov. Rovnako by PlannerService mohla by» ro¾¹írená o~spracovanie aj iných typov plánovacích úloh, minimálne tie, ktoré sú podporované ¹tandardnou implementáciou frameworku OptaPlanner, napr. plánovanie práce, problém obchodného cestujúceho, \ldots. Rovnako pou¾ité databázové technólógie umo¾òujú roz¹írenie databázovej schémy pomocou entitnej a jej následné vygenerovanie.


\chapter{Záver}\label{zaver}
Plánovanie s~ním spojené problémy nará¾ame v~be¾nom ¾ivote èoraz èastej¹ia. E¹te väè¹ie problémy tohto typu majú organizácie, ktoré musia dennodenne rie¹i» ako naplánova» efektívnu prácu svojich zamestnancov, ako správne komunikova» so zákazníkom a mnoho iných problémov. Rie¹enie klasickým prístupom a to vyu¾itím µudskými zdrojmi je èasovo neefektívne, rovnako treba bra» do úvahy µudský faktor. Preto vzniklo rie¹enie, ktoré odbremeòuje organizácie od rie¹ení komplikovaých plánovacích úloh. Taký software je ¹írený pod licenciou open-source a nazýva sa Optaplanner. Tento systém je následne mo¾né vyu¾íva» pre akúkoµvek oblas» plánovania, aká len nás napadne. Jediné obmedzenie tohto systému sú pou¾ité plánovacie algoritmy kobinovaný s~rôznymi heurestikami. U¾ívateµ je schopný definova» definíciu problému, prièom sa mô¾me in¹pirova» verejne dostupnými príkladmi, vytvori» si pravidlá a necha» systém nech nájde optimálne rie¹enie pre daný problém. Vytvorená aplikácia predstavuje jedným zo spôsobov ako daný systém vyu¾i» pre plánovanie. Aplikácia je intuitívna, rovnako sú predstavené mo¾nosti ro¾¹irenia rozhrania a urobenie tohto rozhrania oveµa u¾ívateµsky prívetivej¹ie a efektívnej¹ie.  Rovnako ukazuje akým spôsobom bol systém navrhnutý z~implementaèného hµadiska, sú vysvetlené technológie potrebné pre implementácui so zreteµom na výhody pou¾itia. Pre systém bol pou¾itý aplikaèný server JBoss, ktorý predstavoval medzi dostupnými rie¹enia najvhodnej¹í java EE kontajner vzhµadom na pou¾ité technológie. Pre lep¹í návrh by mohla by» aplikácia roz¹írená na pou¾itie ich iných plánovacích úloh, rovnako mô¾e by» u¾ívateµské rozhranie rozdelené do viacerých samostatných sekcií kvôli lep¹ej prehµadnosti. V~poslednom rade kvôli lep¹ej pochopiteµnosti aplikácie by mohla by» aplikácia pre u¾ívateµské rozhranie rozdelená do viacerých balíkov.


